using MathNet.Numerics.Distributions;
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Numerics;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Text;

namespace OthelloAI.Condingame
{
    public static class Data
    {
        // 37 KB
        public const string

        // 25 KB
        public const string WEIGHT_DATA = @"V~  r1~{0Bb !~I~a5_~0 p;{\ B~ :PI~Y8ES?S~2hUBaZE<OOXT2Y~  oDfRM7ZDGhJ`ONYaF9^GZn Pb.?UGsYF1MHVYNsOK9x;CVDxQ/AVHLON^PLH[=L~=[\KXSKINOUQIOTCIPM^PNJONM[NOOOITH8TMsQ1[q67UHIVGVa1*rM^XJfYO3RNOOEM^G@OL\PMYQI mLiOL[OMOOOSOK\VF&SMPOO>ULHYMQOOWl9@VBQn []<>PLyPKNOCOgNcPMtTK9PNVO@GPLNONfON$NMnWI\ONDOIMOO]OKPRD[RLVON[PNNPNTOO?RHKOMcR1JOJ~RMBPM=NN^POTONS`KOPNvOIibGHPMmQJcP-~~7aRGvQMHOORPL\OMQONJNO:MNNONOOOONMKNNnMGiSL8ONQON`OHJQNXONQRNLONJOG?NNNONgON3NM@YNYONOOOOOOOOOOPIIOMQOO4OMLPNQOORPJENNQO5Il?+VLaSN6SFAmNdPMM[K@RKQP4V^HJOMCRKTSJK~KWPM2PNGOOLQM]RM>PNPONNSM?SNPOOhPPHPO;RF1RHMPMfOMWQL6UORON2TFIONROJVUKKONOONLTMIqMVOOfONMOOXOL`PNHONPOOOOOOOOOOOVOOJNOeOHLVFcPL$QMYU5(^MPPN`OOHOODOK3VOSONMONNRQ<aPWONbOOOOOOON/e,@WLJPK)ZMFSMQON1yC6[M u N0bB)[[Dy/'K6&R@CWeGyPNehLx/3I/=EL>V&0J)&H:FWH>`C9JNH\eOqWIhjQgH?\LOVVT`iMw]LakW|BET4HNSLY/FN3;O:GPWMURMS\J`6GN3JG@KU);C49C9HQLCUGAMTNVPLYRJ]`PZCI8GDHJLL]K_VANbW][GjSJMhOXLIO@HN>LRjP``LUfPi@IR:HM>IS:DQ9<M=SbVbYJMNWV\hM`\LefR[NHUTDRWPckSnbD]cWn0OOENOGNN3ONGNOIOOONNLOOMOO'OOFONION0NN;NNDNO?NOINNHNQGNNMNNPOO>NNCNMbONMNOKNNSOP)NNHOOJNO=OOJOOHONINNJONLON&NO;ONHOO&NN9OI<MPONODNNDOPNOOMOOLOO9NNANNMNOLNNANNDOMDNNLNOONN>ONKOOIONQONPOORNOCONGONLOOFNNHMNSNPTOOLNOPOOLOOJONPNNHNONOOVOOWOOWONWOQbOQTNNjNNIOONOORNNqNPYON`OOKNONOOONOJNOCNMQNO\NP8NNUOOyNPUNN`NO`OPUOPYOOwOO_NPnOO[ONNOPMOPENOGNMMNNhNN]OOeNOROOOOMNOOHNMCIPMNOVMPHNPROOeONSNOUONJNNMNPNOOaNPNNO]NOyNNYOPXNQVNOUOOSOOgOOZON[NOWONPNNRNOWOOQPObPN`NOLOOcOPxOO`NOiOO\QOVPO\OP|PO]MOnQRXWGeVS?DINMRVUR;B9P\NaZYDGDG=Q;<:_ZSW9R?TOOIRIIZGFTMEBRTTJA7gpYILIJaYTITRT`HMZWPT:/TB55KKUPPIKDJIDJQDRNWPPER 05)1ENT=OIGL]ORCRJTUMOSLGD;5>JICQU8WEWOSTUNYHJMLKNNJEkc{KM[G?WZHQPLPPPOLFBVZ_JT[iZaMaNSdfONXQWUTNSGNOHE[QLGt]qVdOsapMLHLWXROTFHQNQ[YRE@CNAGM_IQNPOZSUQMLNNJ=MMSAN7CI52IJOLFSHBLUNLMLMPAJMLEBHFKBLFWUQROYUTUdPYTNOKGROCMEHM<MNKJRPKNQJRDLKUNMWNMKCU?EE=AFKOHKKIFVRRQTAMQEGPLKI;J>VM?ZMSQKXQPOPFTMFPLKPUHMTJOKKO?KL9MPTOSUMKTSPTM_W[_JQPDNIPMOLLMCNONKOFLUNCMNKKXFWEHJZ[WKFQGLMPJPJBHJHMSME`V^\MU[M_RVNHJPNOYIPPSKS@KO_XS?VJSZYRHOAJWXMWBJN>CQGLPiV`PWPaTfZPPUYZWUVUNIMPQ]HTHKT5MK[OYPLLNGLOIPTMPSCMPJMIJKHOLPSTVVXNZUUOVUQYRKUXMPQLLPMN__NXNUSUV\MXVRPNPR[MPgSaWSYOLUHPQRIUUNBJWNRVOASG[U\JROPODRLWNQVRNYLKTKMVQMQdQ`SZMcaS`GXPPRSNXPNVKMP[MITOSP0MCLkGKFPZSXOUVgCIPMGHA:?C(C""v~qLLOOoPSPKjXWPSPVN aU`3) }~U:FOK~NLPLVTGPSONJ5 0;HHSH[[YMZKLXQMI[JPHOLVIQ  .  <FQ>W_]`~aHQYQFRFK@KH9 .:@'=BV ~e~Dk\`SiLEPOOJMGD~ThMK>JLRDIOJMNSWJJ;QRTIWKRpSpa~FPlrSNUO_RRSN  2C8LWF5~_~ZiG~a~PRWSbR\YT--4SMPD?  64OBNKNLOLPPPNNNMXONMMNINL 3& +IQRF`YSTaQPOPMONNONOOI?L=B/A[R5_T_O]PTRRMONNONNNH LTHHOPVS]QZZMZ?LIPZMU\PPRH 3;CFJHPHoUUo~dQf]<EEKOMHN< C#JHJEOCwX~Nh\YS[INNPPONNGtHWOLKPPOMRHXOKAX@BULM[CUALdSVRVNNPNSQOPWNNPO@JJLPNRLJ~WhQWMYQWWQSPVPWOUCNARQNCJ5~gsSSQMO\=NQOQPOPNGMMOPOPNJVkW8gH[bfPONOXOONO>@LJKONN>~zeNRI~RmNNMOZOOOO>LENNNJLD+NIQUOMSPeVUSM_OT?[WIVZCLWW#>BCILMPJ[XPTo[LONGHJCKKMMJ9LBPOOLNMfTXPZQTOMMOPQQKLNM~KTSOHTQLQRKVMNMP;@@TZ[JJOO~^_X^OZXWWLPRROIML#5HKLKPI<~UwR\NeS`_Y\W\RTPL'JBZL8;> O<rJ%Q.JSFGWMRRNPO]JTUTNOQL@=QBD]FB^HOPKKLRTKUYMMSLTQIdGWVGVVOjJMLUXJWZMRSUKQHXT[P@RJ>AWiQINMAINLQGPRIXWISDK7AV<EZFZ[6@I75FOIMIRRHHUKP_ULXZ<CTFLOBMC4HRCKRUJYIWPIVN9WFM?]D_PXQQKRKLNhSIZNHQG^DIHFS`LV\PPLMKNMNNDQ]SQPWXg`L[N:CdI_ZQNRQQYFNeUYOAK`PdJARLNNHNMBMMONNNNNTONONNMNM:AE>FBKPMAKOMNONNNRONOONMNJRIZaAQ\GNFQNNNOOOSTNOPOONNMBJP:BZW_NILPGKNNPFTNNXRRLOO)2K2BT;EU.:G;GEFNN6MQQXQLW]PNNVMHGPC?HABLPSLNXPL[OLSPQICSZOHMPNNJPPJULMKTNKSLPMLN;OQ8aHBGXIMOJSUGKMT<ODA@USTbO_ZKBWMNLMLPAMJIJZ;WQ8DS<KVOdTOONNN@MORONPONcKOPPNONO?BWHKMMORJKNNUOMONQONNONQOQePfPUV]P^POPPTNMNNYOSPPOPOQeH`7OUQ[NKPURGLRNKNOL\QUMJP8BRHWSA\V>M]JM\R\aPTQWZXPXVZPV_MXaXGLNWFKST`iUTMVQSQVQ`J_RL9]CWQVOLIRHNL^SMWVLPFWNLOW[JDYQORFQOUDQSdOOJZVSSXpTgcMTgQ\UQHUFIVPPoR_`KPcMXPv/2TFk\KHS<@eMhPLSfD8UM^R7LWBIOMhQMKPKScGWONTQKGOOSPJR]@7QL[PNFSMLTNUOOTVLFPNNY7LTHPON]PNCNMMTO[ONGWKLONgOIJL?<??;hL?@;ZHYbM8QPN[UC2XGYJ8Q;<TJDJ;3 F?BJDM[NHR/BMZSYHCOLLQMPQIDXNUPN[QOBOOQOK\RQKOXeaUOSUEdRY]R9NQZSX\UWXcgQH7e_`IS\LM?ZR]qg^BM[VPPRRJFOM_ONMOLSXNVONWOMFOOPNKLONNOOTNOFOOYPNQOOOONNOOSONOOLQONQONPONNONQOOLOMMONPODOPNcPNJOOONNPPOPOOKRMNOOdOM=?H,6MJfF6=;=KTwMQ'LOPGO:KRV4FH=MEPCO>G\SUULU_N]YZ`bTOVONJONPONRONMONQONPONNOOQOMHL CDPD8]><QWBFIALS8gCKNFAJmQ`zG9dRNXOXfMO_CVpSC>UcKBRLVK?PNVPNBONJUNWONNQNJPNMOGZQMMONRONQONP\NQOOOONMOOOONROOKONOOORPNKOOOOOROOMOOMOLLONMONQONQONKQOPONNONLOOQON2J(8_PNK\ODlURXLDS+9;5NbCLRgYjLFEZTe VP_WX^WYaNo6]_Z\^RPMSOO<ONROI?RNNONROOMOOLOMZYWDWIETf{@PBHLd=E3WZ9KZLMOa]kHOZpW`UUM`FQXNLxZf0SPaOZT~  ~""~~ RU #~6~`0W~K ~2yk F~ /PB|W1HL)[~ ha3gb>6QO`[#\~  w@q_M6a:AtBhOMWqN6kAQ~ @^ 8_Bh\>%H?M_MqNG?~7?Z?bX#8e8HOLhRFK^%S~!Xj9UWHCOOWR=NY8DRKeTM6OMJdMOOOHYC:[F~Y T~<>bE^aAgf 3|F]ZHoiP/ZMRP>Rl@4QKXRMLYC ~ArTF^RLOOOUP?ah8.]KWQN@YJDhJWONS~3>j-Y~ Hk)1QIrSFP@6D~JfNCl\J1VM^R,4PELNNbOI GLkdDbMI9MELOOgJFXX8T^JWRMbPLMVLVONL\CDQFcY CS?y\K@UK2KJ\SNXNLB~BLULkQ<U~)9QJn[7Z> ~~ xH'zQC8POiS=_ODNOLWON4KMITNOOORJH@NK~D1daH-RKWSJ`OFOUN]NMS]LIRM_QC;QHMNN^ON/KL,iN]ONOOOOOOOOOVTEMPMYOM)JKGXJQONZT@=OM~S Q~4*cIh[K4T?>tIfSFNiR;^IYW%Kj@FQJDY@RSA4~EUUL1QMHOORTHm[L8UMQQO]YL8]NSOOzTT?TPCU<2[@ETIqRHFTB,aMURM3YNESNMPFGbDHPMLPL>_E ~E_QNmSPJOO\RC_RKEONQONOOOOOOOOOQOPDNO~O9baFZTF7RGa[ 'hLNTKuSPCROEOI9^IQPMNQLAYK ~\aRMgQQOOOQOJKw Gj>ZUI aJ=gKbOM:~O ~E ~ M8\C)PZEt4,O3 NBBRfPtZQggR~45K,7I95R&'E( C4CJO@\D5JHC[fPm\NinUkOE_ODVY^huVxgOfq`~CDT.EMJGT,EO1+T8EO\MUUMT[Ni3EM1CG??W(-?3/>8ISOCTI4KOLZZJ^UJ`bPbDF4I=FPPXgKcQ:EcU]ZJ_JGUeRZ9IP?8PAKOnQ]bQZiRpBGP8BJAIT4;M8>IFWeYiZPIOV\egO`[NgiUaHASODXVQmqYrcL]g`p8NODOOJNO5NNEONGNNPONJNNONO,NNENNINN'NO-KK;NOENOFMOANNPOOMNNQOO@NOCMNiONVNOKLNYQO)ONENNGON7NNCNNBNNNNOJNNNON OM+NM8NP KN/FB>JTDMP=CMDKMQNOMNOQOO5MM4CIILOOLO:GHLLFENNGOOROO5NN?NOINOUOOPOOUOPBNNENNKNNCNPIJOWOU^OOPLMQOORNONOPROOCNOLKO\OT`QSULN`NS\OMTNO_NOKNOMMNPNOmOO^OO`OPONOONOPNNEON?NOMPP_OO4MOSOOtNOUOO]OP\OOTPPZOPxOQcOQrSRPOOMNOUOOINOGMNJNOiNO`OOgPQNNNTNNPOOCKO>BPIOTVNPFIQXORgNOTNOZOOJOOKMQOMRfNQEHO]NRtOOTNOZOORNNWPOTNOkOPbOOaOPRNOONOOOOJOPSTTeUThNPXORmT]~OPiNQpPP[NOZMReO]~OR]FRpSWRXFcQZ>KMCPFS_U?D9R]P[`XKE>=:<5*6Y}aK@A5YOXFTSHY:@NYH?^aeD?%qcnSIPK`PdF\ROZKGXlJI(-F=@GOQLWVKPKQNDNNMNDMNSOV  .  8AK9`Q\QwgSS_KCPECIMI;.1:<36IL.`U~LcVkLgKFNUNRJA=yUuOKRdT_QLNOEHUHOCHIQQQNIKpVnTxTYprXUUR][QDP>*?<:PHE=~`~^lQ~k~YTXMcTNQ]>IKJCOL=$.9ELGPPJTSPOOVSUMLJNLEPPLOM+65 $JNTEQMNAZVUHOINO@HMTF<FHMF7A]RO[RcOYYgMiOPNHHP\>G=FMIOOHLPePOfZX8KE\PNUKNFFM*.I1)ABMBSIXFl[NXe6@L?<LEJI-B:HB@NLAdMkUi^`MhEGTOMTLHFcJRQMOTNOMNTILQKMNKONKLP[NPMVQDZKJNOKHLTSZCJL<AOJDQGI>c\iQXMZP_SJ]KYPVHZ8=EBFGF5(jXiPSKQNUORNMSPPMQLNPNTQJNGVQW9RIVefAMNLU_SKSADM?8MOGBpgjL\L~R{YOPPYRTRSMLKNSWeIEAJKHOTROMTMNNHRUKOVNNSMORMT:;GAEPIQKiZb]wlXY`EJNGFUSLCMM=MLNQPI^O^Xb[UR_NORURZOFKeTVNPMQNPMPPbMVHLOEOJlWP7G>wd\ObOP_\TNSOT`OIO;=P;=PKD;vQlX[TeTkcM`\eUcP]BCOL@AUB/QBYR'NLOyEONPMOMOOVNNOOOLOP6/:%2*k~|KNNLnONOOSOOOOONO nco9  tejMNONsONNOTONONOMO3 %J0:KQNVMMU]SOIOQbKObMNNOJ  G  /85RWOYi~tHPi]=NW>3<^4-(M2 4NR ~|~ccVlLjYGMeMHrO/~MyHKRjQeHNQTUN;ONRDORMOIOKiImN~VXt~;VQ/uO<WR  !6'P@V5~X~_N_|e~>OeasDOda<0DT@N9<  %2\<NROMJRRWPOPOPZOOQOORON ""   KR[MS:RZaQPPRQNOOOONOPMVVA =]T7qXiQ^QTCVSNOONOOOE FP1KNINPKNTcSPNOO_OOSNNSNO  >  KBE>`/Yy~zU~s;*<GDLDPK >--8BBOC~T~o~b]PgKMNUMM^P>xHZ^LRbQRROTWUOIOP]NNQMOJNMlecNRQdNWOMP<kSKOSBDKMIN@F6~j~_e]tT|USfgZQYCTHHCRLNAE ~myH\OCNaEOOOOONOO@LJOLOFOMSJI>eC[l~MOOLXNNOO/;JFJYML9~~tRQB~S~NOOOMOOOOEL^NMNDL< BM0HKGIOMOOYQNGOOQKNVMNRLJ -8!5F?=@bIQg~eNNQA=LEIQCQF,? 5HPSMXjS__h^OOYIGSWNNkND~T]QKOiRTGNPPNOGOQSIOPNO6MJ~Pe[jSmZaRNPAcNMKP) KE?I:5 ~Z~W]Z~S~]ct]UTOMT5JdL.+-0 XAWMEMRQSAPCUUTQNOTSJIQOHKN'4R<=UJ=_LONOOMOONPNOMNOOM;rSnY>bd?]NONO^OOOOTNNNOOQOO6;CF<MCJDGAJD@MMRNHLIGHNLHI+5I6=ZDE_EBLE6LNRRGQFGDZOTSaOkZ3JQEMQTUU4BWFO[W[OCPJHX_MiZUX\RdVURONVVRS^UaRVC[NZ;8REU\;QpCJPPCUNQSP?X<JUWWd{RbY:ImG_PTL]VPWH\dOgQDH`YdGHRUTQVOM]MO^fXWONVTSONROHJ0<VHGMPJNKNMMTONNOPPNNNONNI_KaXPMSLOSNORUOOOUNPOOOQOOJ1BGHFQQSU?NJCLLCIHIIJJKOIM@ *8'8@(IV,1N0GO=LWCOVGOWO[gYPV_<NSPJAGRHBGS@MPOTYJRTGRTOUaSNTO[\NTWPQLJNRRRQQITR^DMNDQR;VaKKQPLJFKLK+KAICSV_pPlg@B_FN[PKZ<8CCC`LT`+?_@RQPP@OUNJIJSGNNVRPNBSMFLR>E>7:RLLSHQPNNKOUNMON<POLMOLOKnPcOORYJYNNLNQOONOPNONNOOOLOETBGGIOLBLPDBKHPKGKHQMQAHE27L8IT?XbIDZHH_G`iGOR]Y\Hfg^UK`APTQFSM[M@PWXbOTSXSWVKRa]]WIRZP[]UNW\UQNQ\SSXVTPQT?HR5XOFRbKGPQUQFHS[D[PU`RZ[~corJMtV_SIUW<LMBLtLhiCNiIZXJR)RO}OLIMNLONRNOPNOHOOWPNMIYFJHUSAPLPQLGTTFRMOH_HSWRHCXJXFXZLPLQHRI\WDKMPGYLPWJ2LK@EKHLEJKGDDFRQHWKRVQKMNV !</+8HFC58GD/FQUCO=G3FBISO<;@N4.NJNVPWK-EXEP]RMQODIJ[iTTMXU]R\INVGGJMTGWORS\PVYa[X\ZWLUjmBKRNJ[KSYRCLHNYTYi~VqU^UyjrLOn[JQdVY[ObNXQWXs_OOIOMWNN\OOONOOONYNNPONNOOROOONOQONNONNOONNNOOOONOQOPXONLNOUNPQOONOOPOOQNNNOOPPO0ROANKGOGAHRBFJQRGQKVNIBOST 7F%5DBHS3=EI2ILOMD<FDYZ?Sd0GFG??EQFQOTb4LhNRWPOQZ\OVfhPNTMM]N[LIUKKLHSI]RWQ[GV\_VOOGHBPTMIGKM0HS;BJDIGMQDJaeSOYFFZLQXGOh6M]COZUUAMTOSeHNODNOVNMEOOLONNONINNMONPONBNNGMOSOLHNOLONOOONNNONNNONMONMNOQNOLNOMNNOOONOOONOONN+INABOMLI9JNHDGNQHJLPPRPVRUBLQ>OUFVUCPKN6OXHSFRG>U\5YfJSKVVCWUWWTPV=WYISZTT>[aNUlqPNWVPZPPKMSIRRJTT\IURWHZWNi\WS`J`\XFMNT4MNA?QMT=PL8Nf~`ibKJq`jhSc`8I_MOg[cBQL[WmTn& ~ }~ LX +~/~b&[~H ~6m| Cy 3M:{b'EC _~ wb""\f48QOh] [~ ""{:ulK9e3;~=lOMVzZ/~:E~ @V :a;h`<,C4JZIzNCC~4G_=T] :k-FOKVU@LY J~ an*\]ADOO[X(XX/FSJkZK4MJIeMOOOOe>6ZC~[ Y~:;f@\h<`k >~>bZCmpV,`OWV9PtA3RG`XJK\6 ~9xV@dTPOOOXQ6ao-@cH[UM5]C@|C[ONN~:5}!Q~ Gh&9SGpWBH73H~CkL<egF4ZJXX(2N?JNNbPE :G[lAeJF=QBLOOmB>S`-SfGaYMZQJLaKVONPiGDZAXg 9N9ekFEXC$HCZRMZMJB~;U[HU\7H~ 3OF^n%R; |~ ~* z\?/QOvN!^I:RRMaRK+FLIWNOOOeYB7PF~9 ccE/YJ\VC]LCP`M^NKYfEEYKlU>@MEMNN[ON6BK nMbOOOOOOOOOOO\V4KRK^RM(?C=ZHRONi_;:RI~A Y}1.aEmaH?T8BuAmT>Rte3iK^] Jt<EOGDX8TR6<~:XXEDRJJOOXS@mdL:XNVTNW`M:gWTONpW_4ZTZ\/7Y<DWCiVDIU8*cJ[WH?aOBTOLQCCo;CPKQRI0`= ~HiRKhXYKOOjPA\ULGPNRPOOOOOOOOOOWOX@MO~M*elMRYB;[8ad ;qCTSH|\U:XQHPE<iIJQJOQK-\@ ~QhUKeTROOOXPDO{ Iu0m^H _A-~FfOLA~Z ~h&~ MIWB9UVHe3/H6'P=ATeOi^KgePu37F02J=2S*,F, =77MMBVD6DL@\eRjZTlmWpMI^PF[Y\otWsdPiqa{BBN7CPNHU0FI3+P8GOZMVXMXWNo6AM3;GC?R,-D64::DMP@TI5KPHS^MaXNb_NdDE9I?GQNXdNdOBK`V`VI^NF\bO^=IRC6VCHNmT__Q`jOs=AO8<JC=T79N:@KJS`YcXQFQUWaeMfWKejUhL@ZPGUUShqYu`K`h_oINMBNNINO7ONALNANNROPMNOMNP/ONFNNINN,MN-EJ9KKINNEMN@MLOOPMNOTNOBNO@LMcNPWONNMOYKT9NMCNNFNO2NN;ML<NNTNONOOKMN'LL+ML6MN EN4@C@FPFLP?9LGHJKNQMOOQNQ6MO59FFKNPMQB9GKCBHNNHNNONO2NN?MN=NNWNNNNOUOQANOGNOHNO7KQDFOSQV\NPNKKSMPPNQNMPOOQ@MPHHOWMTaKWVCH_NTWMPNMO^NMFNOMLPOOOjPPaQPfQQHNOINNRNOFNNDNRNQR^ON9OOZPSiPPVOP_NPVNNTPPXPPsNOdQPuW[UNOPNP\NOJNNGLNJOPlOPbOOePRPNPPLNVNP=JR:CRKOT[MPGFOUORgOPXOO`OODNOKLOQKSiOPKGK`HReOMUOO^ONSNORNPTOPpOPdQOhQSTNOONPNNPMKRMPT`V^oPPXNShTduPQoNRsQS\LSSJRaPd{T[`BRoT[Y]CUGRFNQJOCOfSJA-SYNRiYPF6A11815X~iIHE9[TSDRJNPA=MZB>\`g<1 pigJLPHfV]OdRPXFO\fNA -CHBFQPLUMLOSQKLBLQNKQNPPI  (  0;O/_C\T~o[UeH=OA>FPL5-<Q=#%DL nc~M]boKfFGNKGIA=5{ZxQQPYX_NMOMPMSMNCIMOWQPKFkG`W~Q[~~SOVYlcULS3 2,1OM>A{h~^`R~p~ZOePmV^Zf7?T?:EF*!777MFORORSQPNUPRNMPOMMMMOPN!!  !GNUASDNMn]OLLLNOEIPOJ>GOXD'6bUGlWiOl]hLcPPRKIPT?BCDIMNLMOLXNRah[@K:WPNPNOOE@. E, BJS?[=WJs]Tdi74JL4H6J\-<:G=4SN/mQ~`q_jQnHHUIMRH>DrNXPPPZRTSORMSPPNNHOMKNPWORKXQM_MOOWMMPTU]GMR>@HLAPAK>o[gS_NlV{WNkP[YZAX2:E@>F?7 mcjNOMNQVJNMJWPNNOHNNMPRNMJS@L8TG]klEKLI]^QOW44HD4ROD4v}{LbH~U~POOO]UXOSHQaNTTXD-.GPFKIPPOSMMILLQMSNLNRMOSNN21@52GLQ>pQda~h`[aF@PHCXRNAOJDKJNQP?aR]`eSPP]ROUPPQHDF^RWNNORSOMPPS[WKPLDLLd^PE?.oXdJsSTigVGXQT_QMU6&M?.G@A-w]~PfNv^~gQoaC[WRd?<ZH;:MC.PDX_)N=SlTOOOKNNNNIOOONOMNN..2-94\~oGIHEhVIPLD4LcaYDO'lci@& y{]TRl^|N=C<WQZVRN[J4 1DLBMKNJ[R\LPOPOPMKNMNNLNM  ?% 74RLN9@^~~QUqB(LA8:<X0:>QG #LE ~~~g7S~C^[T^PD?_@#~WwWVQRPdQOQPNOQOO@FKOLOONS^?[^~^Lw~DAD?~`K[Y    2\4Sb~\~fGMr^~XSp^kEg__IVYL/HD$  %&K=LGOIPVQOONNOOLOONNOLNP     MGhF>-EW^QINPGCMUSQKPJRTV= 2VR8xcoUZPM4RPCQTPNNG1 GE[LLFMJ`OS[LPROOJPOONOCOR  8  88R!i 9k~~[~~. ,3KY.Si E5F5/I> ~n~oh_yHnOI\PDNX=#pCXPONAMQ_PQUSNSNPNMLGONANTM\EPncHUOH;H>wWPHQ%=?3CR:LJ~\tX~F~[~jZtj?Jv)CC]PP59J  ~t}XZORRvTONQNONNNENFOLOMOMQLILeS_q~ISXLlYKNP -BQOcGQC~~~SV?~Z~WO\ZQMJNMUWpUOOCL>'IPgKPQONZPQYKPWOOFMOJMNGOM ;:  :K] ^77V~~Oag/8K1Xl6ZcN[4QOLUE:|[jiUQiHXUP`OOTZF(~[XWONAORTNN`TNSOOBGKKMODNOxQ]Z~^QooK>NAo`QJ[  9)8P0C5~W~b~H~`~n~~p3?o:L-\~A  9  NFTCNRWLNRJOLJKRLNPOQLMRLRN'1JDHSHH[TPROIKPNQOOLMIOJL5qXg[E[cAXKTORaQPOUQMMLNRRUT;GEJGIJKHKKLPLWDOEJIOQOUMLD,9B6>YFT[JAV?6OCSYBXIQOWMUQeQ_Z/EUFAGDSD&BHLLBEXVMXHUP_Q\S^NPXTOQUURSIJNUJW[[QQGU7>KJ`^?TpYKTYUHI@MXOaYNOY\nvV_ZALjG]VQHPLELIR`J]YHIaS^OLQUNPOIMSONRUIRNQMTMDJKXRL6BMKRSXPLOOVPRNOLSKQIKJOHHJ]PWXYQZQJTONRSMXOVVPPNHOQJP<KKKJPPTMLPKOOOKKPPKVNMLKNJ 49%CF3NV,.K%MX;TVHHXJNWP^g\WQ_<D_Q@FDQD=DKGELMUSMPKEPQNRURMULTPNUSXLNKNXMTUJJMMS:SIE^P:Z`VGSWNSMOTL9RMKGQ[`iS^g@E`GKVIRO8<L<;XNSV8<\<ESVULPMGMPKLIJWNZPRGONGKRRNK=DMILNCRHDMNKLMVPVCLLEDOLPNkSZNONWORKPQVSTQOVLHLKHNOQPKMPKLOFTKINFPDRLQOIMMONOLRC7=G<OV8X_EDUASaHdjKRVW[]PegmYJdCCUICNP^Q@CNUUIERTLSGJQWVTSQHVLPVJTPWLQOVVYOTPRMEU9KH;^M@\bRGPS[TNPSUH]BYPPZ_~jplIPvVXTL[O7ELDGrOqiFDtASNGPFCQXSZCAIF7JFDPUS[PO\UVdSVgEAI_U[GBNC>7FCDWRhOU[YZYQ:T>EKWWYH;G9@DJDL^O[QU\^b^OMHF=IRJOSJDB7JQEIUNUFCMPNS8+EE$0PIMFEIE#IIGLJDU<?EONWG<B?3.KKHMHK?)AWEPVPUE=EMC\MPTOIRVS_HFQKHR_RWRRZJQV^W`Q^^MTTYmtGMNKLZZX^PLSKOX_Rwm\tPNR\ktNOXRIV][c[Q^USZ]PyRINELKOOTCGI>;CLKLPRVIJMXN`UQPNLMWNQLMNI<FOLDRRRPDPULTJNKJGHWSRKNMD=FRNNRQSLKMZU_VHQIIGSVUGHJ=IRVIKUSUJMMVLO#7D+9HTPR-7HJ,PT>OFGK7R[AOn>=??>:TX?QCJZ2TiFQ\ONKWaSSngUWQPOVNYGMNHFJcBLbPSGIO`KVXPLMHISUQKLNU)CT5GSPLEARE>afONME=WQRZLLi+Nh:NSNULKXRCfWQSGMJ[SVMEOFAKRKT]QURRU[agMKQJMLWRPHINF;IOMLQRRQTQYXbCIOHNNNRULKNEJMOPTNOQPQRW]f:DREGKNOPAIN8CRWJWONP@K\NSR<GOBKSOZ_FNLN5YSFXDSQ/Td5RpHTLMOGPYYNQQW:^UL_UUVC\iHSxJNSPGNT[^EDQIHP]PQXXSCQT^TVQYYI\KXad>NNN0OT>DVR\4JUBPm~WbQMLsYf`LW[2Pg=LrWcFN]URvNTJOaCPT7`[JFe@dR;FPB8aLSc4LlB7HDf\<]G=jz5_X6YW==MOgH4RY5;h@a_MB`H<nTbOOB^Z?gH7e$HB7^`GZTFTHAKQHfJDCa<K\KW[2NlCIOJ^TBSO9s~+N]1iYEGPO\G6PQ9IRK\XN4FKFVQOOOX]I<PGo<%PfWD\H@ZB[b9PnBMQDL^R5YSUWKKdKDLJRSIIXC)|[jRKeSROOO\LGLX7IYJXTN3ZFCjPWOMIfEIq:.s WhL7RGjVE`cC=yDvJCO[H8XJQaDHODJMKbOHI>I@_DlCGOGBKNOc7CKY<NdF[WMFRLAaMWON?cTA[?;n*LOA`sFWVDAIAKLJoIECxBK_HMl>N~C1Q<_s2VZ;\~+i7 qcR5LOzK<\UHORLaWL-EL@EROOOmZZ6CHy24_dWGVHSQDQPHH[KZKJRZJCZKaZL<EJMLMQMN==M WV_OSOOOOOOOOOOR>MUJUTO4:H+AVQOOdZK6KJv' EM91YHc[JMRHIU@gRD?W=)^IZZ%N^EGOISW<`KAdu4QZDVQLIOOaM@R[O?UNVTOH\S=^aUONQU[7XYdY;CD9KXK^XFJMB?NEWUEHYKHVPSTEIeJNOKMRF5RE'~tiVRhQcONO~?XbRRMPOSPPOOOOOOOOOZK[BFO~@>M^PD[H9[4X] R`5USB[\T6YVRRL9XMCQGLTI0I?'oalVPkQXOOObILLV Ap,gaI(Q;)_NkOMGb=&~eKs MXHCKJYTSGNHDIRQKYRULIETXLSGT<=JIQOGAGC:CELAMOXJ==GMFMRaLIUQ]WPOVBPTW_W`[[VNPY`VYCGA>HHRKM=GB7BIHENISICINUJQDO=7EALIJ:;D;I@I=HPSNGCQPIFIMLCLPVJS=E9GLFOCHNNNJIQTNKY\TRRSgYWQSMLMQYPS]\VVS[eY^QRSHJRYMQLOPIRQTLW_c\OSZYXUX^RUXWe\XMOKPZXYN\`ZaTVbcZXXUPGNM\QPTNLO[LRONaSPMPO^QHNNKGNOSNMGGK;NIOIJVQPEMNOKDUSQSON\PNXQOSYOcOP[RQNPQZPJKNNHNNRONJNNEPKJONUONLOOXNLI[TBPLMRLCNSIaNRPUTYXLT]ZVLEPOIOOSOQ=MMCTMSJNPPSINQVSHTQOKONYOOONNIRMMONWPOJON\OPKONEOOPONAIM=PHLEIWOQCJMNIALQQJNPYOQFKLIVNXINVPVNSQZQLHPHANNTOM<KK=TKSNOLQNLONRQCHLKBNNMNNCKLDSKPMKBOL9MNKLFLPNINPVOOJPLNXR\QPVQQNSSaVKJMNHNNSNNIONALLRONQNPPOOWPNRLKIKLQMOEIK@NKQHHWORFMQXNGTONNOO[NNGNNQ]QZMQYQSQQYbQKSPMMNNWOOGMNJLOQNPPNOSQNXQNYNONNNSNPMJKHUHWIK`PPHNQ\NHSHCQLN^PNMDFFLGUAHYJKKHKXL@Nn-S^;M`>Ul3R~Ak^ In22z>L] HG';J""f~MTQ3\\*f]0Od@%T:c['VrO@P f|SO`9=s?x`EFiN6n=Cr;&87>HKNPIGC@MeGRFHGR?@RIXN2,( :#>7\-Z/=|~5P D=N<;<<K; %LK=#0CQ 7rqM,JfAC6MCILHM?-xhhNTNdTUZ]JOnP[ULS\WLXTRV7rMO[~J\x~fWOOv`Y[Od$(9S^UShr}uliC`\ucbJK~agfbFfrKb~+l UR=UGN`SMeWO]dM^MN]SNJQNcO@B'( 'G]WEH5J@qKXFN`QNDNNbG:gc]H/>_XLw]aYqP]MYiSRMOJ\P*[KMSNORONgNReaPPNNiPONPN^NKJBUE FeX(p;\tY~g~~j;C?b^bWxYNKM9=SP {WmaqYkOUkNPMOShC4~QWPPNWOPiPS\WNXOPgRPPOOYOP]SKJnOXQZbBQ bbWKNTFFLENNG7~XiS{NlW~dPh@JPg.3lNh@C@x  EbQATMGOV>OK;\MSNN2PEFNP9Q<3===OEWhi3IKDoNPRM)=DDER@I7WxpA^E~Wv@NN<iRZONRSeCNS^Q/ FNJMNNNM6LLFMNMNN7MMIMNBOJ 5B/ GMO*40M+~~^_Z63M6mgZKK=QFGINRO7KSZQjVSN_8IXKPM~>4@NWLPNKOO9NNAPOMNM1KKNNN=MD>HTT~NQci2MM:dZPMM 1E=CJBF.RGd=qL[V~3`d< DVA7&:h7  &$ENNSDIMZIW48D7(A2AAl[aj^[n[s6=<2L>:TC .C( 6-,7NKN<2GE8Dnhfm[KqaRPLUXYiWXn}Ympgvsh~B=ENGMOHK1FJ4;G2IHgRSZNRPNU->H&(?/J ':F+D>=@DX\XeTQBJZgOTY:;UN(LHMOFDSLSq]ha?NjN`Z[]OTRTPV:JFOFQ?MOrPYfUWjX`2CNFuLBhd-4?5:M?M]NRVNKSJWSnT_k~Sq^xFEEiGS?KI~VbaRana[>GHNNNNNNBOMFIMSNMTOOLNOHNK(6B5ETDNK(GQ,-H7LJLNOJLN=MM\LR_GPVNFOLSPCP^NTZOOVLNZMX5DJ<<MLMI1KC*MXZNSPEOEDODMO$5+  G?M+  # HYLfd?5>Teo*TUMN/E @MQ-8<BGCWeL^[JKQVbWJ[HMNOOSIJPFOQRGO^PSQONMOPRNJ;YTH^^LM].cX1""H?HKTQOQNQIK-^DNQcehQ^[[Q_ DX9CdVSQDGe>1ZVVMQPOOQMNNZXORONWQPPOO`OR?JRIUMDJSCMNCHOHNQNLO=JNPN\nZhXSOhMZQNO_SQRNPxPNdTPrWrYTRQSRNKMJPMKQMMOOSIN@IPNQ[=NS5?OKA>:FG8i]ITZ9OFIZd7ZwdQIW@OS?EIQTYmWNIKlD<^MSnQtkYSWPObO_NNWXMPVRWn_YCJNpEVNkRNjPRZ|>WRK@RJ9Eda^7:PWCWvri`mP~Z~^gprBFH,3~{~N34~?TSKUW>RIF`MMPQBYHIALKKX[ZOE_F9=>H9[~wJNTWcOKLNKIMSQNNMBZ]bF) ad\VSQRWPIOJSNQRSOFM>!03A9SUM9JPE>GFXLJJFHFN`SKL  1/ Q3PHC3;\e^SM\N;K@04IL/;P]E +=R g~{R)AaB9RBPIHCEN3~ctHdPYOhTOUIRSYEOQTJMTLeRX`<Mg~JPu~MOYUoMRYR4  :W^I_r~j~lMLhP~RRePqQbnr[`mLHK<><,75R=OGG@LQMMFPEJGJJQRNOIHK).( 8LGdVI<MfOSNNMMMNOONLNLDWU< 4CY<]eYQ_ROGXPMNNNMKNH L?HAHQN;OJC<IEMQJ>JHDO\WKX 1?  FBN ^ 7Y~{\~~R  AkgHX|)SRF =<N ~mti[RfHTIMONQVIM<lUY=VIWJ`^SOHKP\ASWbRPNA_FMXVIY~O\RoVCRXjSQOOFKGKIMKG@{aqR~QoX~_as]9Lf&6ESxKPIA1 ueiSeVLNcQORXIUGOPSULRYXQN\XCB`gBel|NPPPPOMNO<B@KEVLI=tvmSJ<~UeUPQPMPNOOXQ`ORQ5KR)EEFBTZXECG;@LRTUK=MEDKaRLQ""27, AMR X""BZ~tPST<4E;hq?MfDX?M7JKO aRRYbYRPUHHWKTMFK0~^\LaPTMaYZSGGPXGITZQJMI^TOtANf~NVh~SOQScVPDK )=>FLBHC~Zy`zM~V~C~~X&<\/,<a~G  <, YIZNNTRMT@BMPCTMRI^NZMVJVK[  39/RN:FC=HQ9UPQJ[`dPI7PEA~m}UZgjSmC+>G[UQfVYS_OQGLLf':ACFSLEG>>DFDQHW>\VSHICMEL .:+7RDBH26F<+IHSHQYZIK@JQHbOST1JP8?;?AC)@GM@\SUNKEL@Iu[cPVU\O\IFHQNYU]R]Y^VYGQK_9IGL\gCUjENHQWYMZNXWbTXMY[r~ckbR\vMkNIGPUNXbQq[n^WIaQtTLQ]IRMNQGDOMIPJMMRPQMOOMNW!3B<;LOHH3ILJ@NMLFPNXLKKQLL}TeTR_WKVREQFBPTPZ_MSKSONKZ4QCTMTRKP:@?FHXFWEUa_JZATBP 54&EN9JH #3 6O0TDTZ[T_WUdm\YI`6CX9<A=C<-DQBB[YYQTKQDXnXUUWWbS^E@GCFPPMFYXXLS>NHP?Q?DUY9PSCIIF7QJH7RNOQRWSWeu_geKQlDQK@GF+=M>6oV\]IHhC^dNNQNPJMQNIMZIPTQNbPVROPQM[$3HEFPIAIAHOJ@SOPOGNWJFNWNW~ZnMSSbPfNKOPQPTTSkQVQSPTM],JG:AKHJHADDHGSJTHaZ]SWOYKZ$8;0MZ8JN/?C5@Y<SNO^YQj`Q\kW_F]FMT>FGPJH7GKJK^WXSgT_Leh\QKRTPILDBEJPXR\El_]TXBWJW:SED`^;\cCFDNLONQCXZ\I_\W^n~goaSRwM^KAKP39PH=~lxjWG~JgLZBS]EKV>X_JKd1ZN9IT<FeOLn<Li=:JAVb:WHGbu,^P/YY>:KOiE+R[5Df?a_P>_H8tZcOQFYT>gM?k,OL7P^ESRATQ@HO@]HAA^<L^JHk0OmHHNHXWDQU9f~'UU0b\GCMOdA,OP8LTJY[M8DIBWQOOOZ_F?OIp5""PfQL_EJ[?\`=Uq;VLAJ\I@cSVaHLdKEMFUTGJZA3zafSO\TYOOO^LFLV2OZHZWN8XCAwT[ONMbMJrA7u Q^J;QC]XEW]H:j;iM@GQK=YMLgDJL?KMIWPFGAI:a:j@FPGDINOb,AOV@MgEZXM;TN=kPZOOB]YKdG7|'OIAVqAQU@FM?CNEjF>>f?HeH:~@OtE1T4S~8MXC^~8hJ$hoV5KO~E;YPB^ZHd]N;AI6LTOOOjh[6>Gx.1\`TOXH]MCQTHLcGVKGSWHIaK\cRAEJMKKNML=<P Wd^OWOOOOOOOOOSK;Y[K[VO99L#GaSOPc`K6CH}  KV?BVFa\LSPJMY9]PCJT>5]KZg,S^HFNGMW9^HB\v+VVA`QLDMOeG:Q_OBZMXVNFYX;boVOOWS`5Y]he<ED=DXPPWDLRB?I>TTANVDFUSUWBHdMHNFKSB:NF.wufWU\ThLNO~0X\STLQPRRROOOOOOOOOZOc@AO~/=M_WK[FB[.^_&bh.\S?X^Q3`Z\]QB]I@MCFTI3B=*jekUTZS\OOOlEHJP Jn'nnJ3J7$^NjOMJ]A<{TIe LWGGQGS^NISFBJMLNTQVKNJOZSWIS=?Q@M[HCLD?DFKDNN\EBCIMKPQ\LJSFY[LNVDLPU[VZXWQPPY^SVGKACLGNOL?JE;FGGHLJUHGNNTNRBJ>;I>IRD?@F@DAJ<GLOMACLOEFNLLGNNVLNBFAAKHOCIPMOIIQVMMS\UNRPbZSMRKILQVQRY\UVTWeY_LRPGMOVQOKOQJOQVNV[ZXOSX[UWZ]UTZTe\YMQQOYX[QZ^[^VU`d[[W[PKQK\TMSQLJYJRMM\WRLSN]SHSQJJOLROMLIJ@NGOHKVRMFMMQHFVWRUQN\RO\ROOWPZOPWTRMOP[QKQQOLQNRPNQONISLMNMSQPNQOZPOJYTFSILUKDNPD\POKNPWZKRWYQOJSPNQOTQOCMLCRPSILPOSINQUNJ^TPOPOZQN[ONRUMQNN[RQLQO\RSNMMHNMQNNDHM<KJNDKVOPCIPQHCSSTNPNYRNKHLEQOUHKSQWMNN[MLGPHAOLUPL=JG>TIPMLLRLLPLUTFFLGENLKNMDJJFPJQMNDOKALMQLGKRLHPOUQNEMKMZVXPRQRUOSV^WUGKLGNMPOM@LL>IMOMNFNONOOTNKMJIGLMQMLFGJAPOQJNUPVHPUXONONLNOOWOOIMMLWUXPUYPVQQY`NNNMLLNMSNMHMMDKLONMLONNOOYNMTMLLMNRNMNKNGNNVKMZPRILUZKJWHFROK_SMPFGFONWCJVKUMJN[LGO\;P^6Qh<Re<Rw>cW+Md:AnFN](IP9;I&WpLRV;Z_'^T2NZ@5Q?[^5S\IIN'hzSN`CDm>l[HIaHAjBEu:??=FJIMRJUPFRmFSDFIW>DVHJS/5C5?40;]7Z=Gny*P 4DV:8A9PF)7@CA,7GR5?\dLDHdFHAKAFIFU93``\MSK]XRY^FTjM[TKIVMJZUO[0eX\VeKXgq^YQNhfZZQb5?6RZRUUfkTgeFdif[_EPu]kgZE[dSi~4u(TXETHM\VLYXPO\H]JK^WLIUNfTCHA; *CYXCK;HDpDYAG`SMCNN_C*]UTR0>__Km^]X~X`R_aYWORMWU/ZKJSOORPNlRRdlQTNNhQONQOaMDGU\O B]\7jHXlYv_x~dDJAk^T[dUHFP:?SS!wPhlnWiL_hPRKQXn:BuXZRPOZQQ`RS^^O]OP]TQPQP_PNWZQHlMUPYV;S!TqWHINLNI6OMF*tLTX~Oi^~cRdPSUo76eVo:90u  KVECVIFPX>MF:\HTNIBOCBRQEXB=GL>NBO]e;FFFlGOSJ1BB@BLGF%Tg]F[F{[s@MJ:yVZONRVb@UY^],*DGHLMKOL;KLBNMMNL6LLEMNDNG'KL; DJO""8/F'~~cma8=N/d`QHJHM:HHMSP1NMTStWUOf@MaHTT}.GBTUKQNHNO6NK@ZONMK-KJKOO=J8DRSM~KNam3LL/\_QHJ =T;:L;B+U:EBmHT[~5Y\B5F_=11BP9 %+/CTSTLOORQTYJKC<HILNJQURNS[TcDBHDRMKNICDKA2DJBILLNC>ILFO_]^ZRO_RNSNPPNXYS_TQ\QR^ZZjGIGLHKPKJIKIB@GEKJOOORNOQLV<EE:.D<M%3?C<GBIDMPZS\QNDLVVKIU<<PN8QIMLCFPLTRRYRDJUJZZXWPPQOQWPMLLHRJOOUSSSQR^W\CNPIiPD^dJENGAOLT[OQWPNONYZ`UWcyWcZlNJB`JPFNOjW\TOZa\WKKIONNLOMLMMEJLPNNOOOMOOPOM>=DBIOGLJ<LN;5HEKHLMNMLNENNZLMYKQONHTOSTJOVOSRONNLOVNY>HJ?CLIPL7G?7KMUNPFHOFLMHOQ5;6('CBV3)+) NWOc^75>Kdg.YZIN6G1?NL3@DCFFPbL\JMLT^\QMXQRMPOLLLLQORSJOWPTLPMMNOXNQMZRL\XKMWGXS<*HJJFPNOSOSIG5dOPTe\_O]`YPd)?Y=DZZWLKDaC;XTUNPORPRONOQVNROOROPPOO]QTAKPPXPDIRJNNDGLPMMHHOFJNMNWbY`VXS\MTONPYROUOPaNNYTPbUnMTMNONMPNOPMFPLPNNJMNEKNMSV9ON>>PHG:AFE<]XOSO7JEC\`:XnOPERDQPBFJPQ[eTIIJVLBUSWbPidWZURM[P`ZNVYROXUSedXHLOhRXRhPPkKT`rQRSS=MJ?:]\Y=AOQJUicc\hMwWuddmn@EO4:uuwJ@4{FTSKUPJNOO]OSLNRNOOOVVLNONNON@:=LMOPlaNNLNoOONNOOMOOOON?WdaJ=6SOOPPNO]NNOORQOOONNO.=6ALGONONTSOOMOOOOPMNNMNONM+ 7<1T:QQB.<dfmPO^O:N@26NJ:OQZJ 0ER bxv\6C_B9OMONJ?OK5g[jRRNSM^MONNRNPQONJDNNNNNOL<I_~MMl~NNNNoSO\V=  7a_A[hrh~fIQaElNOaOiT]nk^biMEM82;'%-G5NFNE@72NSONNM76.NNNNOO    6B<cR'$3a;SMKA<??J;KMMM<II<""0EY@S[DP[UNPYQPOOINNOK"":7EIMANNMIINTNOOOBLIKNNOOT &.  @9P6N  L~}X~~P  3rmIl~)IAQ#QAW u`goVRgIOZL[YL_NHEdJYDMNQORJJOMQN^RRRUMTONOOTUOPV~RRQ{J;VQeTSYS<SSMKPEQHval[vlrt~_p~d6Kv27Rh~\DS[3&vpxW^OVOpdkdOOOOOOdmhONOPOL^QR`cDhmuLKSNONOOUHNGMJLLIH~~~aRA~Xo[`bPWQRP[vmvP]P8L]<HPSKNWNPJMENJNMNOPPRELMOOM'.5) )I8*N 0BsqFNW8!5#deBOgLNBL(NKK eMMXTKPLPRF`FF>LI3zfh\QP]PZZXPOMNRONOUTPPNSONqLSX~JHX~CCVLVVA<K#@J<KI6DG~b}hcQ~`~I~~W +d0*O~~K  M& aM\ONOOOPIQBILNNOLV`ONQNRQY !;B-JNCFLYJN?KOPKNONOMINR@~b~QZ_dSuOPNN_LOXSQU;NUNOTj/8DM:OONA@<B?8GJYJJAPOKMSUM *:0;NHCF8+O76FFTNWPcTRLZYLPJIS:HP68QALN(>GCCWJ]RML`HDlSdOZNSNeLLWIJJPPJcZeQV?e[fDUOMfcFUcH@NBVQMQKLSYSU]P]o~`sUVWmNcC:OHSCINRnPy\RFbXhZORUPPNONNNMNOONOPQUONOPPOS2<HHAONMJBMMLCMNONGUNOQMLNIqSdTUZWNS\OSPURRPXTRNOTQQPY,33M@ONQH9?8;9GPQIKKKNKMKRM .5.ESDUO  4 AP4QIKKTUYZ`_dSPB\=EU;:PALH/>I;>N_jWHIXBImS`QRQTP[RIfGQKNQX`\^Q[E]W_KQ>N^aDSZE163<REH@A>FPQTMQZzamiNMpCRF:FJ09H6:gWehHDk@PUMPPPNNNOSOKQNNQNNXQNSOOTOT26JDGOKFHLOLMKNNNLDHNNFNMNLpUmOSRYQcTNJQUOPNQbPTPQPROa.;HICNKNK<<DG<GN[II;UTALOTE 08+FY7JP55E6M_3VVWU^RbfSahR[JVAJQ6?SS\PAMKJJXhl]^UjJ_wimO[LWLaIIVLHIRQNka]L^Nf[hCUPJaZ<[cI2CALSGPSEKZN]`U[l~eyXMFsJ[JIU98@GCF~g~pRL~M\N`<Ri@KW3ZpNXd1YM5GV4ChPGl9O\9FOAXi=OELYo3_I-[^E@JOa>+Tb>H`6Y]MCbD8m]`OOOXY@iMDm0MS@M^FPZ=W^KOX2\E7?[0GdSCv8NfFNQDQ[ELPC`z2\E0ZZKCLOg=2ON?MWHT`K8=HAXQOOOY`N@OQd,-P_SR`BPU;^aB`d-TF<FT>ChZQmEN^NMPASUHHP>:lt`GU]V\OOO_DKLT8RZCS_NBWC9i\ZORQ]QDjT?j!YeIIV>WdBZaSNb6]UFGOH@aLEpDTNANQOOS@G>IE_.d,3VOFHLOe 7QR?SeEPPJ=YJ=e`[OQK_\FpOBr4QNHNcVCI8Qf>DL c:*AV7CYD8~=SbKAJ=NcCMRI[{XZZF`b`FKOrFSXM=W]MZbM@8I*XUOOOa_cHB?h*B\^XXYFYH>XaIWa>YFFLR9PjPYxVHJFKHFLILC4E OlSOZOOOOOOOOONG6O_JZdR>4F ;XSOR^ZW:9=n 'GR=O\<W\HYXOUX,[T:FI8=XFL`:RZJJSFNY9VCA^l-YI3cUKDEOa;7K]RO]LROMFWR;e~UOS\Yc@mwUo?DGCB\XJRBP\IGG,PQ9HX4FSTLb?KdQLH=OQA;DE/q~cadUVhIPOxFfXYIKSTSVSOOOOOOOOOXTiGBO~.IO]Y\bOKI3`h=nl""_V=M]6Bvg\~[F^OLN>GPD;=A4]jZYYWT_OOOqHDHK4U`:_aU;=<'NUXOMRQI?ZDJH(PTIGV>X^HNWHJMDRSKPUKKSLT\QNRCHS@PZDNOHCHBLEMOYEEFHQNJP[IOWCUZMOYDLSQ\VYSVMTOT]ZTGMGIODPVJHLIBIEPIJOWJHTNRQNJNDBKELQGCAJEHDJ@ELMOFFMOILKHHHMKOLKEDFFILPFKTKQCGOUJOXYRPWLZ[PPWHLPIUQIUWROUT^\YRWTPQRUTQLNRJNOTMU\WZPMVXRUTXORWP^XSQNPORSXPW]UZUS\bYXTTQMUDY[KRTQNVHWNL[WRHUQX\TWTMLRJWTLOEQAQGNBMYWLDHKNFGUWSWSLWTNYWRM]PWQQVTMKTRUUMVUTOXLWYNSRRKXLQONWSOMURWXOMVRIXOPRNHQPHXTNMQS]VITYRROSUSTUQUUMFHJFTRMLNOTOGMRSIL^[YVYN[]QZTRQRJTIKZTULURXSQSNMIOLQIJEBG@MLMKLVQRFLNPKG\\XQXQ\SPNFJIRQRKKZUTJIOYIIIQHGTDRYHCMFDRCTMIISKHSLOXMHQFIRIHRHHQEJPFRGJDRGFJKPJBKRKJOJRULELGOVSZRTMMRQOWZTN>DDDLALNG@JIEOGRLKCLJKQPPQIDHCELGIJCBGFDTSOLPQPSLRSSQNLQLNRPTRKHKKMYSVNRTRWORV\OPHKHJNGPQHDLHGNCQJGMNLKMKSPGKLIJNKIKGMMJEQPULNYQTKNRWKHQTMNOIYQGJGBLONUGHTMNOLPXIETd9OeBQY7O`GLwD_W:Pa@AbCXS$EI7GM2]aAQXAYg.[Q2PMD@O@Z^;]dRH^5[iNP^SGe@_VMS_=ClGGs:HM@JNFNXITPEMuDTECY\AHYHKR7:D4A=6AT3H8IZu;J%3GO>>0HP;3IK>CAGHR9F[PKeW\@ICMCBFFX:B^ZSNUGSXNNW?VgNWWGTXQKZYM[*WYQX`JWWV[XRHbd[XUYIE>K\RD7ck[djN^gVZdNPld_`eXVcWnzHc+R[JXQJYWFa]VXZF\KL^UIHSJ__SCIF?;GV[E=;KRZ=[?2^XMBROd8+`\XONHUUQocMMxgXW\_ZTPXOXT8ZZJaTQURMn_`Xs\WBF^WPPcT[KF;Q[T4UIRLgY]]J\MYfg7:@RXM][ZVQX0BQT*wNm~]IpNSjXRKCMe8KqabXSO[[QcVY\YOqMPY`U]RQbIJWIKSbIVNaH""N/NiY=`7BOF:O@VHqOVZXK[bc[Yw\EJp<Da[s?,={(7OY?D[CKPT@PF@NDWNL;HBCRSCY@:C=JDAQUEAJ?CgEPPC7V:BH@L8""Y`ZHVIcUbDMI>t``NI\Vb@nXP[='<;DKEHPH@HA:QTANJ8II+GLGMI'HK?:@ERA:0=!gv]cn=)H,^aCV\KQLFFNTU:^HTaZKZOdLR|C?ck4YAOFIQK=KL>KFDUNMG<.C=HWTDB%BEDMtJC^u5JC5PcRT\ /O3JL'RAdBLYUNQMh7adRA?^HK8>EL9@<CONVLLQFSWS\OLAB?KOPFPOQMN^`b8EIKXKGGMGJL;4;C?JHKK>4DNDOgY[ZTYUWR[PSSS[a[iYRVZO[e_k?MIKIIOMMMMJCHCILMNNOLMMRRW-@>A8F=D/5A@ABCGBNPZSUEFHFLOJBR;>QK;LOME@BIHKZOZC9>UGQcWVOSPQUVPMRKFLRQPPSRSQQ]\]NYUM`SKagECMGCSTY`PRQQLQVZYkY]aqYY^hRM@[PVIV[l\ZVMYX[\=JJSLKOQMKMMKDGJNKJNOMONVTU8DGMPNFMH:EL?5?AGFHNMHAJJHH]QOXMTPPFONNSIPSNTRNMMJNYU]/DLCGHKRK0H;DMCLNOIJQKMKQUS4FF24E>R>'+%.KUJ_`B;=IVZ8V^AM3E88KK-=<:KCIOMVJPFMUSNDXWRJRRMNRNROITFLXPSUQLTQOaRRTZPPaUOSWCPCD2RMIDWLNNKPKEFeYOZ\Q_OXTPGf1A[AEW\TJDDa@CfUTORMPTRUMOJQJPOPQNRUQOUU^BLOLRNJKLKMPBBGMKNMLOLCMMLVgZ^UYTYOJTPPXXTVSYfPP]TX^_lJSLNLIMQMIUN=JKLNNKVOHKNMQY6NE@AJAI@@GB8T]PXTGQKEW_<afJMBM@IMHAJQRPUYKGTZVJLWUWMbpXZUQK^UXWNQPSJRTSqeWRKOZbYYfNUkQVklPTQLFWKD@cd]IGRPTXmWWa`Jl_lWkhdAIU<Hr|yL<=nJQUTQJHMQS[MNILcHPPDKSMNTJUWCHE=IYHkk\IYFDyFPMHL`MHfPM^HZbW2B/X]HOQ:TXA\L5STAORQ[R%OKF=KKRUKOQP6XLORLDKJJJIFJV:,5<JODSF7GJMdZTGVCBJOA:EGI^`W@C=OY-UtpTECZF<FOIEC9JG.VWSLUJaNUXSUYMQUSPOJGORIcRJ<A@QmBWbUYWPQoVXfZN'!C_\H]Q]jq`RHfHNYT\U[XLdajUUDNRO<9DB;H@MJQFZOS@gJPRUJQOLQMKUS-828DLNhM3@FpAIRN8AZMD]P:XFLZT6=8HI7cbGMW]Ab[LSIHSVP[D6L5QWOISBi_[Vq\TQLSVPFaPNQX E9#@D5eEO ""L~xStwZ  6hrBa^DTJD$1>\ vZcx]Mh>GJWY?MQK./i[aRSMgWL\OSOdKt]aTcMlYLXSdXMJZ~BXXpO,K\fbXMM/=;HDQGC0tY^UW@]cVR~~n8=n).Nfw[)Md  \_YSaPQNgVLNRJMTLKIKRTKMXX6MLIcbQv`\LSKNRDQNL@R6ZD<N=LiskWJ5iOVYKN`T@ZMCm]ULcL-Xb1DA6JIMUGGS:CAH6PDAJL)8?GP>(B=?F>DXJR/59~~FWtF !3ur3c`IUMF8EJY#m[]Wm]SK]LTt@RTB>:khVTUMRNFHODPBIRGC4=;IOKHE-[OFX~CPu~NFLPii[OP!8E=XX/NA~\`nY:~]a>~~Y=9h+6Mv~C(""R' XQUNQONNOOOONMNOOONOOONNOOU( @H4FNMLOOOO=EOOPOONOL>NRD~h~PTS[`~OOOObNOkXOOOONON^i2JKJMNJNMCNNHDNNONIONMPODOJ  , +4>WI;;L6NGWXJEPOQRODj^R@'S&*]8,QPV`'<O:3^f^J?IkD@mRWVROVORUONZTOQNN]OPQPO\OWMkUBsbOqw<?B1STQT\DHNLc\;dp~jwcQC|iuUOLU:6OMKlXkDJGcUUhORQRPPONZNOQPQONPONOMOQQOQ34DK>INOK>FNK9HPMMBGLMIMNMKiTcSSRTOT^OWUUURPVRPPOOQPNZ'CE<NO5MD<LM;?OHNN?NNIRO@M@ 1E""AR3a[ %6+KR>IEADDC`_MYb?I3P8;T89cCFZ/7U*0[c`GEA\HI~Ygt`RjPT~QPeqSWOP|SS`TQ~QsEWD@]^D]Z+*(,>MBF@5<=EVX=JR~_fmFGsHM[DNQ$/^%,rO]SA=m47IMQOOOONLUOONNOPMOQNOPOOPNO@BLLNOMNLNOONLONNNFGMNLOLMIvWxOPPYTmaQZPZQPQWgRbORSVVo :C0GN*L@""KI""'K>MI LMCNO/J1 :<+FM4WS#?J._cF^Z8NQ=nqFisQUBY;A\6Aa__XLRVBEproRXXlQ]~Y^gYOgOQeOO]_QYLNhQQXSOhPeThRG_YHejD?;?OTPTQ6MUIen?`k~YrmG:}N\cXZQ9DZ8=~d~[XPuHS";

        public const int DEPTH = 8;
        public const int ENDGAME = 51;

        public readonly static ulong[][] MASKS = new[] {
                new ulong[] { 0b00111111, 0b01111110_00000000, 0b01111110_00000000_00000000, 0b11100000_11100000, 0b01110000_01110000_00000000, 0b00111000_00111000_00000000_00000000 },
                new ulong[] { 0b00111111, 0b01111110_00000000, 0b01111110_00000000_00000000, 0b11100000_11100000, 0b01110000_01110000_00000000, 0b00111000_00111000_00000000_00000000 },
                new ulong[] { 0b00111111, 0b01111110_00000000, 0b01111110_00000000_00000000, 0b11100000_11100000, 0b01110000_01110000_00000000, 0b00111000_00111000_00000000_00000000 },
                new ulong[] { 0b00111111, 0b01111110_00000000, 0b11100111, 0b00111000_00111000, 0b11100000_11100000, 0b01110000_01110000_00000000 },
                new ulong[] { 0b00111111, 0b01111110_00000000, 0b11100111, 0b00111000_00111000, 0b11100000_11100000, 0b01110000_01110000_00000000 },
                new ulong[] { 0b00111111, 0b01111110_00000000, 0b11100111, 0b00111000_00111000, 0b11100000_11100000, 0b01110000_01110000_00000000 }
            };

        static void Test(string[] args)
        {
            WeightLight.Init();
            BookLight.InitBook();

            int id = int.Parse(Console.ReadLine()); // id of your player.
            int boardSize = int.Parse(Console.ReadLine());
            
            var timer = new Stopwatch();

            // game loop
            while (true)
            {
                ulong b = 0;
                ulong w = 0;

                for (int i = 0; i < boardSize; i++)
                {
                    string line = Console.ReadLine(); // rows from top to bottom (viewer perspective).

                    for (int j = 0; j < boardSize; j++)
                    {
                        int pos = j * 8 + i;

                        switch (line[j])
                        {
                            case '0':
                                b |= 1UL << pos;
                                break;

                            case '1':
                                w |= 1UL << pos;
                                break;
                        }
                    }
                }
                int actionCount = int.Parse(Console.ReadLine()); // number of legal actions for this turn.
                for (int i = 0; i < actionCount; i++)
                {
                    string action = Console.ReadLine(); // the action
                }

                timer.Restart();

                Board board = new Board(b, w);

                (int x, int y, _) = PlayerLight.DecideMove(board, id == 0 ? 1 : -1); 

                timer.Stop();
                Console.Error.WriteLine("Taken Time : " + timer.ElapsedMilliseconds);

                string row_labels = "abcdefgh";
                Console.WriteLine("" + row_labels[x] + (y + 1));
            }
        }
    }

    public class BookLight
    {
        const int POSITION_SIZE = 10;

        public static readonly Dictionary<int, byte> Positions = new Dictionary<int, byte>();

        public static bool use_book = true;

        public static void InitBook()
        {
            int n = Data.BOOK_DATA.Length / POSITION_SIZE;

            for (int i = 0; i < n; i++)
            {
                string s = Data.BOOK_DATA[(POSITION_SIZE * i)..(POSITION_SIZE * (i + 1))];

                int hash = int.Parse(s[..8], System.Globalization.NumberStyles.HexNumber);
                byte move = byte.Parse(s[8..10], System.Globalization.NumberStyles.HexNumber);

                Positions[hash] = move;
            }
        }

        public static ulong SearchBook(Board board)
        {
            if (!use_book)
                return 0;

            var rotated = board;

            for (int i = 0; i < 2; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    int hash = rotated.GetHashCode();

                    if (Positions.ContainsKey(hash))
                    {
                        ulong move = 1UL << Positions[hash];

                        for (int k = 0; k < 4 - j; k++)
                            move = Board.Rotate90(move);

                        if (i == 1)
                            move = Board.HorizontalMirror(move);

                        return move;
                    }
                    rotated = rotated.Rotated90();
                }
                rotated = board.HorizontalMirrored();
            }
            return 0;
        }
    }

    public static class WeightLight
    {
        readonly static WeightTuple[] tuples = Data.MASKS.Select(m => new WeightTuple(m)).ToArray();

        static WeightTuple current;

        public static Random random = new Random();

        public static void Init()
        {
            byte[] data = Encoding.ASCII.GetBytes(Data.WEIGHT_DATA);

            int n = (int)Math.Pow(3, WeightTuple.HASH_LENGTH) * WeightTuple.NUM_TUPLES;

            for (int i = 0; i < tuples.Length; i++)
            {
                tuples[i].Read(data, n * i);
            }
        }

        public static void SetStage(int n_discs)
        {
            int stage = Math.Clamp((n_discs + Data.DEPTH) / 6 - 3, 0, 5);
            current = tuples[stage];
        }

        public static int Eval(Board b)
        {
            return
                current.Eval(new RotatedAndMirroredBoards(b))
                + Board.BitCount(b.bitB & 9295429630892703873UL) * 400 - Board.BitCount(b.bitW & 9295429630892703873UL) * 400
                // + (int)Normal.Sample(random, 0, 12)
                ;
        }
    }

    public class WeightTuple
    {
        public const float WEIGHT_RANGE = 10;

        public const int NUM_TUPLES = 6;

        public const int HASH_LENGTH = 6;
        public const int N_PER_TUPLE = 1 << (HASH_LENGTH * 2);

        public const int ARRAY_LENGTH = N_PER_TUPLE * NUM_TUPLES;

        readonly ulong[] masks;
        readonly byte[] weights_b;

        public WeightTuple(ulong[] masks)
        {
            this.masks = masks;
            weights_b = new byte[ARRAY_LENGTH];
        }

        public static (uint, uint) ConvertTerToBinPair(int value)
        {
            uint b1 = 0;
            uint b2 = 0;
            for (int i = 0; i < HASH_LENGTH; i++)
            {
                switch (value % 3)
                {
                    case 1:
                        b1 |= 1U << i;
                        break;

                    case 2:
                        b2 |= 1U << i;
                        break;
                }
                value /= 3;
            }
            return (b1, b2);
        }

        public static uint ConvertStateToHash(int state)
        {
            (uint b1, uint b2) = ConvertTerToBinPair(state);
            return b1 | (b2 << HASH_LENGTH);
        }

        public static int Hash(Board b, ulong mask)
        {
            int hash1 = (int)Bmi2.X64.ParallelBitExtract(b.bitB, mask);
            int hash2 = (int)Bmi2.X64.ParallelBitExtract(b.bitW, mask);
            return hash1 | hash2 << HASH_LENGTH;
        }

        public int Eval(Board b)
        {
            int e = 0;
            for (int i = 0; i < masks.Length; i++)
            {
                e += weights_b[Hash(b, masks[i]) + N_PER_TUPLE * i] - 79;
            }
            return e;
        }

        public int Eval(RotatedAndMirroredBoards b)
        {
            return Eval(b.rot0) + Eval(b.rot90) + Eval(b.rot180) + Eval(b.rot270)
                + Eval(b.inv_rot0) + Eval(b.inv_rot90) + Eval(b.inv_rot180) + Eval(b.inv_rot270);
        }

        public void Read(byte[] data, int offset)
        {
            int n = (int)Math.Pow(3, HASH_LENGTH);

            for (int i = 0; i < masks.Length; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    byte e = data[j + n * i + offset];

                    uint index = ConvertStateToHash(j);
                    weights_b[index + N_PER_TUPLE * i] = e;
                }
            }
        }
    }

    public struct SearchParameter
    {
        public int depth;
        public float alpha, beta;

        public SearchParameter(int depth, float alpha, float beta)
        {
            this.depth = depth;
            this.alpha = alpha;
            this.beta = beta;
        }

        public static SearchParameter CreateInitParam(int depth)
        {
            return new SearchParameter(depth, -PlayerLight.INF, PlayerLight.INF);
        }

        public SearchParameter Deepen()
        {
            return new SearchParameter(depth - 1, -beta, -alpha);
        }

        public SearchParameter SwapAlphaBeta()
        {
            return new SearchParameter(depth, -beta, -alpha);
        }

        public SearchParameter CreateNullWindowParam()
        {
            return new SearchParameter(depth - 1, -alpha - 1, -alpha);
        }
    }

    public class PlayerLight
    {
        public const int INF = 10000000;

        public static Dictionary<Board, (float, float)> table_prev;
        public static Dictionary<Board, (float, float)> table = new Dictionary<Board, (float, float)>();

        static MoveComparer comparer = new MoveComparer();

        public static bool use_transposition_cut = true;

        protected static float EvalFinishedGame(Board board)
        {
            return board.GetStoneCountGap() * 10000;
        }

        public static float Eval(Board board)
        {
            if ((board.n_stone & 1) != 0)
            {
                return -WeightLight.Eval(board.ColorFliped());
            }
            else
            {
                return WeightLight.Eval(board);
            }
        }

        public static (int x, int y, ulong move) DecideMove(Board board, int color)
        {
            if (color == -1)
                board = board.ColorFliped();

            ulong move = BookLight.SearchBook(board);

            if (move != 0)
            {
                Console.Error.WriteLine("Found Position");
                (int xx, int yy) = Board.ToPos(move);
                return (xx, yy, move);
            }

            WeightLight.SetStage(board.n_stone);

            ulong result;

            if (board.n_stone == 18)
            {
                (result, _) = SolveIterativeDeepening(board, SearchParameter.CreateInitParam(Data.DEPTH - 1), 2, 3);
            }
            else
            if (board.n_stone < Data.ENDGAME)
            {
                (result, _) = SolveIterativeDeepening(board, SearchParameter.CreateInitParam(Data.DEPTH), 2, 3);
            }
            else
            {
                use_probcut = false;
                (result, _) = SolveRoot(board, SearchParameter.CreateInitParam(64));
            }

            table = new Dictionary<Board, (float, float)>();
            table_prev = null;

            (int x, int y) = Board.ToPos(result);

            return (x, y, result);
        }

        public static (ulong, float) SolveIterativeDeepening(Board board, SearchParameter p, int interval, int times)
        {
            float depth = p.depth;
            p.depth -= interval * Math.Min(times - 1, (int)Math.Ceiling((double)p.depth / interval) - 1);

            while (true)
            {
                (ulong move, float e) = SolveRoot(board, p);

                if (p.depth >= depth)
                    return (move, e);

                table_prev = table;
                table = new Dictionary<Board, (float, float)>();
                p.depth += interval;
            }
        }

        public static (ulong, float) SolveRoot(Board board, SearchParameter p)
        {
            Move root = new Move(board);

            if (root.n_moves <= 1)
            {
                return (root.moves, 0);
            }

            Move[] array = root.NextMoves();
            if (p.depth >= 4 && table_prev != null)
                Array.Sort(array, comparer);
            else
                Array.Sort(array);

            Move result = array[0];
            float max = -Solve(array[0], p.Deepen());

            for (int i = 1; i < array.Length; i++)
            {
                Move move = array[i];
                float eval = -Solve(move, p.CreateNullWindowParam());

                if (p.alpha < eval)
                {
                    p.alpha = eval;
                    eval = -Solve(move, p.Deepen());
                    p.alpha = Math.Max(p.alpha, eval);
                }

                if (max < eval)
                {
                    max = eval;
                    result = move;
                }
            }
            return (result.move, max);
        }

        public static readonly double[] avg = {
            -0.040797614,
0.66978055    ,
0.37934193    ,
0.86878          ,
0.5464785      ,
2.8221052      ,
0.29154423    ,
3.66192          ,
0.7397154      ,
4.0271688      ,
0.9654541      ,
4.3736925      ,
1.2865216      ,
4.479592        ,
1.555555        ,
4.2833447      ,
2.0407941      ,
4.520586        ,
1.9052997      ,
4.4924097      ,
0.95056          ,
5.4000936      ,
0.4569389      ,
4.5676417      ,
3.7433705      ,
4.3786507      ,
4.383622        ,
4.59787          ,
4.6662345      ,
4.741156        ,
3.7971044      ,
3.5280662      ,
4.9263673      ,
4.03094          ,
5.949238        ,
5.3838835      ,
5.390336        ,
5.227772        ,
5.5430946      ,
4.0768523      ,
4.712555        ,
5.01673          ,
7.732921        ,
3.4486496      ,
6.312923        ,
0.04794008    ,
6.525366        ,
-0.054144207,
4.536696        ,
0.51772803    ,
4.403394        ,
0.029048447  ,
3.1076183      ,
-0.37305945  ,
1.2830694      ,
-0.34651178  ,
-0.032439914,
};

        public static readonly double[] var =
        {
            0.903211564,
1.148147494,
2.468252397,
1.179641874,
3.312044076,
2.851501297,
3.279486627,
3.767106141,
3.596443825,
3.951706221,
3.700687556,
3.989085087,
3.952979406,
4.203443551,
3.614856076,
4.481601828,
3.84079151  ,
4.210410232,
3.853231753,
4.206731787,
4.391371043,
5.946572851,
4.552847908,
5.341285182,
5.60257932  ,
5.591765323,
6.239090821,
5.827181088,
6.805832706,
5.816464948,
7.34040763  ,
6.86643365  ,
7.556012358,
7.61525341  ,
7.776866981,
7.855476763,
8.247550832,
8.10072103  ,
7.754332039,
7.62969351  ,
7.581629998,
7.920663353,
11.63516414,
10.68029828,
10.74463431,
9.755358666,
9.619264157,
9.04140274  ,
9.088559482,
8.046162931,
8.180113278,
7.665379154,
7.034635958,
5.962356099,
6.615256864,
5.800548449,
4.944035321,

        };

        public static float NullWindowSearch(Move move, SearchParameter p)
        {
            return -Solve(move, p.CreateNullWindowParam());
        }

        public static bool use_probcut = false;
        public static float sd = 1.1F;

        public static float Negascout(Board board, ulong moves, SearchParameter p)
        {
            ulong move = Board.NextMove(moves);
            moves = Board.RemoveMove(moves, move);
            float max = -Solve(new Move(board, move), p.Deepen());

            if (p.beta <= max)
                return max;

            p.alpha = Math.Max(p.alpha, max);

            while ((move = Board.NextMove(moves)) != 0)
            {
                moves = Board.RemoveMove(moves, move);
                Move m = new Move(board, move);

                float eval = NullWindowSearch(m, p);

                if(use_probcut && p.depth == 7)
                {
                    float eval_2 = -Solve(m, new SearchParameter(2, p.beta, p.beta));
                    double a = avg[board.n_stone - 4] / 4 * 46;
                    double v = avg[board.n_stone - 4] / 4 * 46;

                    if (p.beta <= eval_2 + a - v * sd)
                    {
                        Console.WriteLine(p.beta <= eval);
                        return p.beta + 1;
                    }

                    eval_2 = -Solve(m, new SearchParameter(2, p.alpha, p.alpha));

                    if (p.alpha >= eval_2 + a + v * sd)
                    {
                        // Console.WriteLine(p.alpha >= eval);
                        continue;
                    }
                }

                if (p.beta <= eval)
                    return eval;

                if (p.alpha < eval)
                {
                    p.alpha = eval;
                    eval = -Solve(m, p.Deepen());

                    if (p.beta <= eval)
                        return eval;

                    p.alpha = Math.Max(p.alpha, eval);
                }
                max = Math.Max(max, eval);
            }
            return max;
        }

        public static float Negascout(Move[] moves, SearchParameter p)
        {
            float max = -Solve(moves[0], p.Deepen());

            if (p.beta <= max)
                return max;

            p.alpha = Math.Max(p.alpha, max);

            foreach (Move move in moves.AsSpan(1, moves.Length - 1))
            {
                float eval = NullWindowSearch(move, p);

                if (use_probcut && p.depth == 7)
                {
                    float eval_2 = -Solve(move, new SearchParameter(2, p.beta, p.beta));
                    double a = avg[move.reversed.n_stone - 5] / 4 * 46;
                    double v = avg[move.reversed.n_stone - 5] / 4 * 46;

                    if (p.beta <= eval_2 + a - v * sd)
                    {
                        // Console.WriteLine(p.beta <= eval);
                        return p.beta + 1;
                    }

                    eval_2 = -Solve(move, new SearchParameter(2, p.alpha, p.alpha));

                    if (p.alpha >= eval_2 + a + v * sd)
                    {
                        // Console.WriteLine(p.alpha >= eval);
                        continue;
                    }
                }

                if (p.beta <= eval)
                    return eval;

                if (p.alpha < eval)
                {
                    p.alpha = eval;
                    eval = -Solve(move, p.Deepen());

                    if (p.beta <= eval)
                        return eval;

                    p.alpha = Math.Max(p.alpha, eval);
                }
                max = Math.Max(max, eval);
            }
            return max;
        }

        public static float Negamax(Move[] moves, SearchParameter p)
        {
            float max = -1000000;

            for (int i = 0; i < moves.Length; i++)
            {
                float e = -Solve(moves[i], p.Deepen());
                max = Math.Max(max, e);
                p.alpha = Math.Max(p.alpha, e);

                if (p.alpha >= p.beta)
                    return max;
            }
            return max;
        }

        public static float Negamax(Board board, ulong moves, SearchParameter p)
        {
            float max = -1000000;
            ulong move;
            while ((move = Board.NextMove(moves)) != 0)
            {
                moves = Board.RemoveMove(moves, move);

                float e = -Solve(new Move(board, move), p.Deepen());
                max = Math.Max(max, e);
                p.alpha = Math.Max(p.alpha, e);

                if (p.alpha >= p.beta)
                    return max;
            }
            return max;
        }

        public const int ordering_depth = 57;
        public const int transposition = 1;

        public static float Solve(Move move, SearchParameter p)
        {
            if (p.depth <= 0)
                return Eval(move.reversed);

            if (move.moves == 0)
            {
                ulong opponentMoves = move.reversed.GetOpponentMoves();
                if (opponentMoves == 0)
                {
                    return EvalFinishedGame(move.reversed);
                }
                else
                {
                    Move next = new Move(move.reversed.ColorFliped(), 0, opponentMoves, Board.BitCount(opponentMoves));
                    return -Solve(next, p.SwapAlphaBeta());
                }
            }

            if (move.reversed.n_stone == 63 && move.n_moves == 1)
                return -EvalFinishedGame(move.reversed.Reversed(move.moves));

            float lower = -1000000;
            float upper = 1000000;

            if (p.depth > transposition && move.reversed.n_stone <= ordering_depth && use_transposition_cut && table.ContainsKey(move.reversed))
            {
                (lower, upper) = table[move.reversed];

                if (lower >= p.beta)
                {
                    return lower;
                }

                if (upper <= p.alpha || upper == lower)
                {
                    return upper;
                }

                p.alpha = Math.Max(p.alpha, lower);
                p.beta = Math.Min(p.beta, upper);
            }

            float value;

            if (p.depth >= 3 && move.reversed.n_stone < 60)
            {
                if (move.n_moves > 3)
                {
                    var moves = move.NextMoves();

                    if (p.depth >= 4 && table_prev != null)
                        Array.Sort(moves, comparer);
                    else
                        Array.Sort(moves);

                    value = Negascout(moves, p);
                }
                else
                    value = Negascout(move.reversed, move.moves, p);
            }
            else
            {
                value = Negamax(move.reversed, move.moves, p);
            }

            if (p.depth > transposition && move.reversed.n_stone <= ordering_depth && use_transposition_cut)
            {
                if (value <= p.alpha)
                    table[move.reversed] = (lower, value);
                else if (value >= p.beta)
                    table[move.reversed] = (value, upper);
                else
                    table[move.reversed] = (value, value);
            }

            return value;
        }

        class MoveComparer : IComparer<Move>
        {
            const int INTERVAL = 200;

            public static float Eval(Move move)
            {
                if (table_prev.TryGetValue(move.reversed, out (float min, float max) t))
                {
                    if (-PlayerLight.INF < t.min && t.max < PlayerLight.INF)
                        return (t.min + t.max) / 2;
                    else if (-PlayerLight.INF < t.min)
                        return t.min / 2 + INTERVAL;
                    else if (PlayerLight.INF > t.max)
                        return t.max / 2 - INTERVAL;
                }
                return PlayerLight.INF + move.n_moves;
            }

            public int Compare([AllowNull] Move x, [AllowNull] Move y)
            {
                return Comparer<float>.Default.Compare(Eval(x), Eval(y));
            }
        }
    }

    public readonly struct Move : IComparable<Move>
    {
        public readonly ulong move;
        public readonly Board reversed;
        public readonly ulong moves;
        public readonly int n_moves;

        public Move(Board board, ulong move)
        {
            this.move = move;
            reversed = board.Reversed(move);
            moves = reversed.GetMoves();
            n_moves = Board.BitCount(moves);
        }

        public Move(Board reversed)
        {
            move = 0;
            this.reversed = reversed;
            moves = reversed.GetMoves();
            n_moves = Board.BitCount(moves);
        }

        public Move(Board reversed, ulong move, ulong moves, int count)
        {
            this.move = move;
            this.reversed = reversed;
            this.moves = moves;
            this.n_moves = count;
        }

        public Move[] NextMoves()
        {
            ulong moves_tmp = moves;

            Move[] array = new Move[n_moves];
            for (int i = 0; i < array.Length; i++)
            {
                ulong move = Board.NextMove(moves_tmp);
                moves_tmp = Board.RemoveMove(moves_tmp, move);
                array[i] = new Move(reversed, move);
            }
            return array;
        }

        public Move[] OrderedNextMoves()
        {
            Move[] moves = NextMoves();
            Array.Sort(moves);
            return moves;
        }

        public int CompareTo([AllowNull] Move other)
        {
            return n_moves - other.n_moves;
        }
    }

    public class RotatedAndMirroredBoards
    {
        public readonly Board rot0, rot90, rot180, rot270, inv_rot0, inv_rot90, inv_rot180, inv_rot270;

        public RotatedAndMirroredBoards(Board board)
        {
            rot0 = board;
            inv_rot0 = board.HorizontalMirrored();
            inv_rot90 = board.Transposed();
            inv_rot180 = board.VerticalMirrored();
            rot90 = inv_rot0.Transposed();
            rot180 = inv_rot180.HorizontalMirrored();
            rot270 = inv_rot90.HorizontalMirrored();
            inv_rot270 = rot270.VerticalMirrored();
        }
    }

    public readonly struct Board
    {
        public const long InitB = 0x0000000810000000L;
        public const long InitW = 0x0000001008000000L;

        public static readonly Board Init = new Board(InitB, InitW);

        public readonly ulong bitB;
        public readonly ulong bitW;

        public readonly int n_stone;

        public Board(Board source)
        {
            bitB = source.bitB;
            bitW = source.bitW;
            n_stone = source.n_stone;
        }

        public Board(ulong b, ulong w) : this(b, w, BitCount(b | w))
        {
        }

        public Board(ulong b, ulong w, int count)
        {
            bitB = b;
            bitW = w;
            n_stone = count;
        }

        public Board HorizontalMirrored() => new Board(HorizontalMirror(bitB), HorizontalMirror(bitW), n_stone);

        public static ulong HorizontalMirror(ulong x)
        {
            return BinaryPrimitives.ReverseEndianness(x);
        }

        public Board VerticalMirrored() => new Board(VerticalMirror(bitB), VerticalMirror(bitW), n_stone);

        public static ulong VerticalMirror(ulong b)
        {
            b = ((b >> 1) & 0x5555555555555555UL) | ((b << 1) & 0xAAAAAAAAAAAAAAAAUL);
            b = ((b >> 2) & 0x3333333333333333UL) | ((b << 2) & 0xCCCCCCCCCCCCCCCCUL);
            b = ((b >> 4) & 0x0F0F0F0F0F0F0F0FUL) | ((b << 4) & 0xF0F0F0F0F0F0F0F0UL);

            return b;
        }

        public Board Transposed() => new Board(Transpose(bitB), Transpose(bitW), n_stone);

        public static ulong Transpose(ulong x)
        {
            ulong t;
            ulong k1 = (0xaa00aa00aa00aa00);
            ulong k2 = (0xcccc0000cccc0000);
            ulong k4 = (0xf0f0f0f00f0f0f0f);
            t = x ^ (x << 36);
            x ^= k4 & (t ^ (x >> 36));
            t = k2 & (x ^ (x << 18));
            x ^= t ^ (t >> 18);
            t = k1 & (x ^ (x << 9));
            x ^= t ^ (t >> 9);
            return x;
        }

        public static ulong Rotate90(ulong x) => Transpose(HorizontalMirror(x));

        public Board Rotated90() => new Board(Rotate90(bitB), Rotate90(bitW), n_stone);

        public static int BitCount(ulong v)
        {
            return BitOperations.PopCount(v);
        }

        public static ulong LowestOneBit(ulong i)
        {
            return i & (~i + 1);
        }

        public static int To1dimPos(int x, int y)
        {
            return x * 8 + y;
        }

        public int GetId(int x, int y)
        {
            return GetId(To1dimPos(x, y));
        }

        public int GetId(int i)
        {
            int result = (int)(bitB >> i) & 1;
            result += (int)((bitW >> i) & 1) * 2;
            return result;
        }

        public static (int, int) ToPos(ulong move)
        {
            int x = BitOperations.TrailingZeroCount(move);
            return (x / 8, x & 7);
        }

        public override int GetHashCode()
        {
            int result = 0;
            result = result * 31 + (int)(bitB ^ (bitB >> 32));
            result = result * 31 + (int)(bitW ^ (bitW >> 32));
            return result;
        }

        public override bool Equals(object obj)
        {
            return (obj is Board b) && (b.bitB == bitB) && (b.bitW == bitW);
        }

        public ulong GetMoves() => GetMovesAvx2(bitB, bitW);

        public ulong GetMoves(int stone) => stone switch
        {
            1 => GetMovesAvx2(bitB, bitW),
            -1 => GetMovesAvx2(bitW, bitB),
            _ => 0,
        };

        public ulong GetOpponentMoves() => GetMovesAvx2(bitW, bitB);

        public static ulong GetMovesAvx2(ulong P, ulong O)
        {
            Vector256<ulong> PP, mask, moves, offset;
            Vector128<ulong> moves128;

            offset = Vector256.Create(7UL, 9UL, 8UL, 1UL);
            PP = Vector256.Create(P, P, P, P);
            mask = Avx2.And(Vector256.Create(O, O, O, O), Vector256.Create(0x7e7e7e7e7e7e7e7eUL, 0x7e7e7e7e7e7e7e7eUL, 0xffffffffffffffffUL, 0x7e7e7e7e7e7e7e7eUL));

            moves = Avx2.And(mask, Avx2.Or(Avx2.ShiftLeftLogicalVariable(PP, offset), Avx2.ShiftRightLogicalVariable(PP, offset)));
            moves = Avx2.Or(moves, Avx2.And(mask, Avx2.Or(Avx2.ShiftLeftLogicalVariable(moves, offset), Avx2.ShiftRightLogicalVariable(moves, offset))));
            moves = Avx2.Or(moves, Avx2.And(mask, Avx2.Or(Avx2.ShiftLeftLogicalVariable(moves, offset), Avx2.ShiftRightLogicalVariable(moves, offset))));
            moves = Avx2.Or(moves, Avx2.And(mask, Avx2.Or(Avx2.ShiftLeftLogicalVariable(moves, offset), Avx2.ShiftRightLogicalVariable(moves, offset))));
            moves = Avx2.Or(moves, Avx2.And(mask, Avx2.Or(Avx2.ShiftLeftLogicalVariable(moves, offset), Avx2.ShiftRightLogicalVariable(moves, offset))));
            moves = Avx2.Or(moves, Avx2.And(mask, Avx2.Or(Avx2.ShiftLeftLogicalVariable(moves, offset), Avx2.ShiftRightLogicalVariable(moves, offset))));

            moves = Avx2.Or(Avx2.ShiftLeftLogicalVariable(moves, offset), Avx2.ShiftRightLogicalVariable(moves, offset));

            moves128 = Sse2.Or(Avx2.ExtractVector128(moves, 0), Avx2.ExtractVector128(moves, 1));
            return (Sse2.UnpackHigh(moves128, moves128).ToScalar() | moves128.ToScalar()) & ~(P | O);
        }

        public Board ColorFliped()
        {
            return new Board(bitW, bitB, n_stone);
        }

        public Board Reversed(ulong move)
        {
            ulong reversed = ReverseAvx(move, bitB, bitW);
            return new Board(bitW ^ reversed, bitB ^ (move | reversed), n_stone + 1);
        }

        public Board Reversed(ulong move, int stone)
        {
            ulong reversed;

            switch (stone)
            {
                case 1:
                    reversed = ReverseAvx(move, bitB, bitW);
                    return new Board(bitB ^ (move | reversed), bitW ^ reversed, n_stone + 1);

                case -1:
                    reversed = ReverseAvx(move, bitW, bitB);
                    return new Board(bitB ^ reversed, bitW ^ (move | reversed), n_stone + 1);
            }
            return this;
        }

        public static ulong ReverseAvx(ulong move, ulong p, ulong o)
        {
            Vector256<ulong> PP, mask, reversed, flip_l, flip_r, flags;
            Vector128<ulong> reversed128;
            Vector256<ulong> offset = Vector256.Create(7UL, 9UL, 8UL, 1UL);
            Vector256<ulong> move_v = Vector256.Create(move);

            PP = Vector256.Create(p);
            mask = Avx2.And(Vector256.Create(o), Vector256.Create(0x7e7e7e7e7e7e7e7eUL, 0x7e7e7e7e7e7e7e7eUL, 0xffffffffffffffffUL, 0x7e7e7e7e7e7e7e7eUL));

            flip_l = Avx2.And(mask, Avx2.ShiftLeftLogicalVariable(move_v, offset));
            flip_l = Avx2.Or(flip_l, Avx2.And(mask, Avx2.ShiftLeftLogicalVariable(flip_l, offset)));
            flip_l = Avx2.Or(flip_l, Avx2.And(mask, Avx2.ShiftLeftLogicalVariable(flip_l, offset)));
            flip_l = Avx2.Or(flip_l, Avx2.And(mask, Avx2.ShiftLeftLogicalVariable(flip_l, offset)));
            flip_l = Avx2.Or(flip_l, Avx2.And(mask, Avx2.ShiftLeftLogicalVariable(flip_l, offset)));
            flip_l = Avx2.Or(flip_l, Avx2.And(mask, Avx2.ShiftLeftLogicalVariable(flip_l, offset)));

            flags = Avx2.And(PP, Avx2.ShiftLeftLogicalVariable(flip_l, offset));
            flip_l = Avx2.And(flip_l, Avx2.Xor(Vector256.Create(0xffffffffffffffffUL), Avx2.CompareEqual(flags, Vector256.Create(0UL))));

            flip_r = Avx2.And(mask, Avx2.ShiftRightLogicalVariable(move_v, offset));
            flip_r = Avx2.Or(flip_r, Avx2.And(mask, Avx2.ShiftRightLogicalVariable(flip_r, offset)));
            flip_r = Avx2.Or(flip_r, Avx2.And(mask, Avx2.ShiftRightLogicalVariable(flip_r, offset)));
            flip_r = Avx2.Or(flip_r, Avx2.And(mask, Avx2.ShiftRightLogicalVariable(flip_r, offset)));
            flip_r = Avx2.Or(flip_r, Avx2.And(mask, Avx2.ShiftRightLogicalVariable(flip_r, offset)));
            flip_r = Avx2.Or(flip_r, Avx2.And(mask, Avx2.ShiftRightLogicalVariable(flip_r, offset)));

            flags = Avx2.And(PP, Avx2.ShiftRightLogicalVariable(flip_r, offset));
            flip_r = Avx2.And(flip_r, Avx2.Xor(Vector256.Create(0xffffffffffffffffUL), Avx2.CompareEqual(flags, Vector256.Create(0UL))));

            reversed = Avx2.Or(flip_l, flip_r);

            reversed128 = Sse2.Or(Avx2.ExtractVector128(reversed, 0), Avx2.ExtractVector128(reversed, 1));
            reversed128 = Sse2.Or(reversed128, Sse2.UnpackHigh(reversed128, reversed128));
            return reversed128.ToScalar();
        }

        public int GetStoneCountGap()
        {
            return (2 * BitCount(bitB) - n_stone);
        }

        public int GetStoneCountGap(int s)
        {
            return s * GetStoneCountGap();
        }

        public static ulong NextMove(ulong moves)
        {
            return LowestOneBit(moves);
        }

        public static ulong RemoveMove(ulong moves, ulong move)
        {
            return moves ^ move;
        }

        public static bool operator ==(Board b1, Board b2) => (b1.bitB == b2.bitB) && (b1.bitW == b2.bitW);

        public static bool operator !=(Board b1, Board b2) => (b1.bitB != b2.bitB) || (b1.bitW != b2.bitW);

        public override string ToString()
        {
            Board b = this;
            string Disc(int x, int y) => b.GetId(x, y) switch
            {
                0 => " ",
                1 => "X",
                2 => "O",
                _ => "?"
            };

            string Line(int y)
            {
                return $"{y} | {Disc(0, y)} | {Disc(1, y)} | {Disc(2, y)} | {Disc(3, y)} | {Disc(4, y)} | {Disc(5, y)} | {Disc(6, y)} | {Disc(7, y)} |";
            }

            return string.Join(Environment.NewLine,
                $"    0   1   2   3   4   5   6   7",
                $"  +---+---+---+---+---+---+---+---+", Line(0),
                $"  +---+---+---+---+---+---+---+---+", Line(1),
                $"  +---+---+---+---+---+---+---+---+", Line(2),
                $"  +---+---+---+---+---+---+---+---+", Line(3),
                $"  +---+---+---+---+---+---+---+---+", Line(4),
                $"  +---+---+---+---+---+---+---+---+", Line(5),
                $"  +---+---+---+---+---+---+---+---+", Line(6),
                $"  +---+---+---+---+---+---+---+---+", Line(7),
                $"  +---+---+---+---+---+---+---+---+");
        }
    }
}
