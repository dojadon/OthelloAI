using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Numerics;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Text;
using System.Threading.Tasks;

namespace OthelloAI.Condingame
{
    public static class Data
    {
        // 37 KB
        public const string

        // 25 KB
        public const string WEIGHT_DATA = @"菠䊈컫緥翯츍荐䉏舀窪瘏똏縏茮踏爎稐蘍蚪娏訏踯穏蘏舏爏縦稬舏騏积舯똏縯稏阌稏縏舏藯軏訏踏縐舏舎緯蘐縏縐舐爏稏縎虮昏縏舎橯蘏蘐娐縎舯稏舐踏舯蘐舏舐臯蘏縐舏爏縏舐稐瘏爉縭瘏騏舎艰踏舏爐縌稏縐踏緰蘏蘐舏縐舏舏縏舐闯縐舐縏縏觮縐訐舐緯舐舐舏縏訏蘏舏訏路陯蘏訏縐舏路縐舐緰臰舐舏縐舏踏痰舏阏縐舏縐縐舏縏縏舐緰縐舐舐舐舐爏縏舏痯縐舐瘏稐緮艎昏訏舏艰踏縯爏縌縏縐舏舏瘰舐樐緰舏蘏爐舐縏縏舐舐稐稏爏縐訐臯縐舐樏縐舏踏縐舏訏舰蘐訐縐舏舏縏舐舐舐舐舐縐舏臯縏痯縏瘐舐舐縐縏爐縐臰舏縐舐舐舐舐稏瘏縏瘐縐舐爐稐樌䇯縐舐瘐縐舐昏縐縏舐舐舐訐訐舏縐縐舐昏縐舐瘐縐舐縐舐臯瘐舐舐縐舐舐縐舐舏縐舐舐舐緰舐縐舐舐稐舐舐縐舐舐縐舐舐娐縏縐縐舐臰爏縐縏縐舐舐縐舐舐縐舐舏縐縐舐縐舐舐瘐縐縏縐縐舐臰舐舐舐縐舏舐舐舐舐舐舐緰舐舐樐舐縐縐舐縐瘐舐縏舏訐縐蘐舐舐瘏縐舏踏縐舐阏騏臰舐縐舐臯舐縐縐舐舐緯縐臯稐縐舐縐舐舐縐縐舏縐舐舐舐舐舐舐舐舐縐舐舐縐舐舐緰縐縐䈏縐縐爏縐舐爐縐縏稐舐舐縐縐舐縐舐舐娐縐舐縐縐舐縐舐縏稐縐舐縐舐舐縐舐舐縐舐舐縐縐舐縐舐舐舐舐舐舐舐舐舐舐舐爐舐縐縐舐舐稐舐縐稐舐舐縐縐舐縐舐舐瘐縐縐稐縐舐稐舐縏츐舐舐騐舐舐訐縐舏騐舐舐舐縐舐訐舐舐縏縐縐舐舐舐瘐縐瘏또舐舐踐舐舐舐舐縏舐舐舐訐舐舐舐舐舐舐舐縐舐舐舐舐舐縐訐舐縐舐縐舐舐舐舐蘐舐縐舐縐舐舐舐舐舐舐舐舐舐舐縐縐舐츐舐舐踐舐舐踐舐舐또舐舐舐舐舐舐舐舐蘐舐舐舐舐舐舐舐舐踐舐舐蘐舐舐舐舐舐訐舐舐蘐舐舐蘐舐舐蘐舐舐舐舐舐舐舐舐蘐舐舐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舏舐縐舐縐舐舐縐縐縏阐舐縐訐舐舐舐舐舐縐縐舐舐舐舐縐縐縐蘐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縏舐瘏訏縐舐稐縐縐縐舐縐舐舐舐舐舐舐爏縐舐縐縐舐樏縐昏츐縐舐蘐舐舐訐舐舏蘐舐舐舐舐舐舐舐舐踐舐舐舐舐舐縐舐舐阐舐舐舐舐舐舐舐舏舐舐舐舐舐舐舐舐舐蘐舐舐舐舐舐舐舐舐阐舐舐舐舐舐舐舐舐舐舐舐縐縐舐舐舐舐舐舐舐舐舐舐舐舐舏縐舐舐舐縐舐舐舐舐縐舐舐縐舐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐舐舐舐舐舐縐舐舐縐舐舐舐舐舐舐舐舐縐舐舐舐舐舐蘐舐舐縐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐縐舐舐舐舐舐먐舐舐舐舐舐蘐舐舐蘐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐縐舐舐舐舐鈐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐츐舐舐踐舐舐踐舐舐蘐舐舐舐舐舐舐舐舐踐舐舐舐舐舐舐舐舐또舐舐舐舐舐蘐舐舐騐縐舐踏舐舐蘐舐舐蘐舐舐舐舐舐舐舐舐訐舐舐舐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐訐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐鸐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐蘐縐舐縐舐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐縐舐舐舐舐舐䈐縐舐瘐舐舐稐縐舏爐舐舐舐縐舐縐舐舐稐舐舐縐舐舐縐舐縐樐舐舐縐舐舐縐舐舐縐舐舐縐縐舐縐舐舐縐舐舐縐舐舐舐舐舐樐縐縐縐舐舐縐舐舐稐舐舐縐縐舐縐舐舐縐舐舐縐舐舐縐舐縐嘐舐舐稐舐舐縐縐舐縐舐舐縐舐舐縐舐舐稐舐舐縐舐舐縐舐縐縐舐舐舐舐舐縐舐舐縐舐舐縐緰舐縐舐舐縐舐舐舐舐舐縐舐舐縐舐舐縐舐舐縐舐舐縐舐舐舐舐舐舐舐舐縐舐舐縐舐舐舐舐舐舐縐舐縐舐舐縐舐舐縐舐舐縐縐舐縐舐舐舐縐舐舐舐舐舐舐舐稐舐舐縐舐舐舐舐舐縐舐舐縐舐舐舐舐舐縐舐舐舐舐舐舐舐舐縐舐舐縐舐舐舐舐舐縐舐舐縐縐舐舐舐舐舐舐舐縐舐舐舐舐縐成舐舐縐舐舐縐舐舐縐舐舐舐舐舐舐舐舐縐縐舐舐舐舐縐舐舐縐舐舐舐舐舐舐舐舐縐舐舐縐舐舐舐舐舐縐舐舐縐舐舐舐舐舐縐舐舐縐舐舐舐舐舐縐舐舐舐舐舐縐舐舐舐舐舐縐舐舐縐舐舐縐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐稐舐舐縐舐舐舐舐舐縐舐舐縐縐舐舐舐舐縐舐舐舐舐舐舐舐舐縐舐舐舐舐舐縐舐舐舐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐縐舐舐舐舐舐縐舐舐縐舐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐舐舐縐舐舐舐舐舐縐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐渐舐舐縐舐舐縐舐舐縐舐舐舐舐舐舐舐舐縐舐舐縐舐舐縐舐縐縐舐舐縐舐舐縐舐舐縐舐舐縐舐舐縐舐舐舐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐舐舐縐舐舐縐舐舐瘐舐舐縐舐舐縐舐舐縐舐舐舐舐舐舐舐舐縐舐舐縐舐舐舐舐舐縐縐舐舐舐舐舐舐舐縐舐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐䇯縐縐爐縐舐爐縐縏燰縐縐縐縐舐縐舐舐稐縐舐縐縐舐縐舐舐瘐舐舐縐舐舐縐舐舐縐舐舐縐舐舐縐舐舐縐縐舐舐舐舐舐舐舐娐縐縐稐縐舐縐縐舐稐舐舐縐縐舐縐舐舐旰縐舐稐舐縐爐縐縏臰膰舒舐舐舐舐舐舏禯䦥荴舐舰舐舐舐舄蘒腤읒舐荰舐舐舐舎䃀臐舏喰臰舏舐舐舏䀠涎編淐舰舐舐舐舍䅤臍燣訑舏舐舐舐舎쿹舐舑舐舐舐맲舐舐콴辐艑舐舰舐痏緯縏쿾苰鈳舐艐舐釱臯緮舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐积舐縏舐舐舐緯緰緯舐舐縏舐舐舐舏舐緯舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐緰舐縏舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐蘐舐舏舐舐舐舐舐舏秮舐舏舐舐舐舐舐舏痎妌艰舐舰舐舐舐舊臰膋骏舐芰舐舐舐舎䃪积舏淰臰舏舐緰舏䂇涯緭称縰舏舐緯舎䆦緮淪舐舐臰舐縏舏컳舐舐舐舐舐痰緰舏켲舐舐舐舐舐妯緰緮컻舏訑舐舐舐緰緰秭䦬臰舏舐舐舐舐舐舐奎积舏舐舐舐舐舐舏旌緯舏舐舐舐舐舐舏淯舐舏臰舐舐舐縏舏淏緰緯緰舐舐緯緰緯痯緯縏蘐舐舐舐舐縐踐舐舐舐舐舐縏舐舐舐舐舐舐舐舐緯緰臰鈐縐舐舐舐舐緯舐緯舐舐舐舐舐舐舐舐舐舏舐臯舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐緯縐舐舐舐舐舐縐舐緯緰舐舐舐舐舐緰舏縏舐舐舐舐舐舐舐舐舐舐舐舐舐舐緰縐舐臯舐舐舐舐舐緰舐舏舐舐舐舐舐舐縐縐舏蘰舐舏舐舐舐舐舐舏臰昋芓舐舰舐舐舐舊許緬뙳舐芰舐舐舐舎䆈臰舏觰舐舐舐舐舐䂈痏縏臰虐舐舐舐舏䆦緯舏똒舰舐舐縏舏캸舐蘐舐舐臰釰舐舐켲銰舰舐舐舏緯緰緯켛艐鈒舐舰舐藰縏臮舐舐舐舐舐舐舐舐舐臰緯舐舐舐舐舐舐舏縏縐縏舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐緯縐舐舐舐舐縏舐舏縐舐舐臰舐舐縐舐舏舐舐舐舐舐舐舐舐舐舐縐舐舐舐舐緰舐縏舐舐舐舐舐臰縐舐舏왲舐舐舐舐舐舐舐舐驱舏舐舐舐舐舐舐舏똵縏蘐舐舐舐舐舐舐燯縐舐舐舐舐舐縐舏淯緯舐舐舐舐舐緯舏舏舐舐舐舐舐舐舐舐鈐舐舐舐舐舐緰縐舐訐舐舐舐臰舐积緰舏鈑舐舐舐舐舐舐舏緯緐舐舐舐舐舐舐舐舐綮痯舐舐舐舐舐舐舏藰臯踐舐舐舐舐舐舏姯舐舐瘐舐舐臰臰舏巯縏縏緯縐舐臰臰舏燯臯縏縐舐舐臰臰臯츐舐舐舐舐舐縏舐舐鸐舐舐舐舐舐緯舐縏阑舐舐舐舐舐緰臰緯瘏舐舐舐舐舐舐舐舐臯縏舐舐舐舐舐舐舏舏舏舏舐舐舐舐舐舐稐舐舐縐舐舐臰舐舐緯舐舐縏舐舐緯舐臰縏舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐緰舐舐舐舐舐疯臰舐舐舐舐舐舐舐秮樮舱舐舐舐舐舐舌緰縮踑舐舐舐舐舐舏䗮緰舏积舐舐臰緯舏冋秏縏縐縐舐臰縏臯凉縏縎縐舐舐臰舐臯븐舐舐舐舐舐积縐舐뙐舐縐舐舐舐痮緰緯똶舏舐舐舐舐緯縐緮痯舐舐蘐舐舐舐舐舐爮緯舏蘐舐舐舐舐舏舮縏舐蘐舐舐舐舐舏爏舐舐蘐舐舐臰縐舐痏縏縐蘐舐舏縏縏緯稏舏縏訑舐舐舐舐緯숐舐舐蘐舐舐縐舐舐舐舐舐舐舐舐緯縐舐阑舐舐舐舐縐縏舐緯븐舐舐舐舐舐舐舐舐踰舐縐舐舐舐舐舐舐鈑舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐緰舏縐縐舐舐舐舐臰緯舏舐舐舐舐臰舐舐舐舏訐舐舐舐舐舐舐舐舐舐舐舐舐舐舐緯縐舐蘐舐舐舐舐舐縐舏舏臱舐舐舐舐舐舐舐舐緰稯舐舐舐舐舐舐舏蘱舏蘑舐舐舐舐舐舏淯舐舐舐舐舐臰舐舐痏縏舐舐舐舐臰舐舐瘏臰舐舑縐舐舐舐臰츐舐舐舐舐臰緰舐舐鸰舏舐舐舐舐緯縐舏눴舐舐舐舐舐縏舐臯淯舐舏븐舐舐舐舐舐爯縐舐阐舐舐舐舐舏縎舏舐阓舐舐舐舐舏称舐舐舐舐舐臰舐舐縏縐舐舐舐臰舐舐舐緯舐舐蘐舐舐舐舐舏鸐舐舐訐舐舐緰舐舐舐舐舐舐舐舐縐舐舏訐舐舐蘐舐舐舐舐舐먐舐舐舐舐舐舐舐舐鈐舐舐舐舐舐舐舐舏踑舐舐舐舐舐舐舐舏縐舐舐舐舐舐臰縐舐縐舐舐縐舐舐臰臰舐舐舐舐舐舐舐臰舐臰蘐舐舐舐舐舐緰舐舐舐舐舐舐舐舐緯緰舏舐舐舐舐縐舐緯舐緯舑臰舏舐舐舐舐舐舐称燯舐舐舐舐舐舐舏舲臯訐舐舐舐舐舐舏䇯舐舏舐舐舐舐舐舐槏緯縏臰舐舐舐舐舏懯舏縏舐舐舐舐舐舏또舐舏舐舐舐觯舐舏踐舐舐舐舐舐臯縐舐눐舏舐舐舐舐舐舐舏舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐舐舏舏舐舐臰縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舏訏舐舏舐舐舐縐舐舐縏縐舏舐舐舐縐舐舐縐臯舏舐舐舐縐舐舐縏舐舐縐舐舐緰舐舐緯縐舏縐舐舐緰縐臰縐舐舐舐舐舐舐舐縐蘏舐舐舐舐舐舏舐舐舐舐舐舐舐舐縐舐舏舐舐舐舐舐舐舐舐舏緐臰舏舐舐舐舐舐舐秎秏縏舐舐舐舐舐舏舐臯蘎舐舐舐舐舐舏䇯緰舏臰臯舐舐緰舐嵮緯縏舏舐舐舐緯舏懮緯縏舐舐舐舐縐舏鈐舐舐舐舐舐緯舐舐訏舐縐舐舐舐総緰臯訑舐舐舐舐舐緯舐緯嗯臰舐舐舐舐舐舐舐燏緯舏舐舐舐舐舐舏淯縏縏舐舐舐舐舐舏积舐舐舐舐舐舐舐舐緯臰舐舐舐舐緯臰臯緯舐縐舐舐舐舐舐縐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐舐舐舐臰舐舐舐舐舐舐舐舏鈐舐舏舐舐舐凯臰舐舯緯縏舐舐舐榏緯舏踎舏舏舐舐舐槯緰緯懯縏舏舐舐舐痯縐舐痯縐舐縐臰舐积緯緯縏舐舐舐舐舐縏縐縐蘐舐舐舐舐舐緰縐舏舐舐舐舐舐舐积舐縏舏舐舐縐舐舐緯緰緯訒臰舐舐舐舐舐舐舐舐燏舮舐舐舐舐舐舏蘰緎阮舐艰舐舐舐舏凯臰舐蘐舐舐舐縐舐央緯縏舐舰舐舐舐舏姭臯縏訰舐舐舐舐舏쨰舐舐舐舐舐蘐舐舐뻑舰舏舐舐舐臯緰舏뺓舏蘑舐舐舏臯舐臯凯臰舏舐舐舐舐舐舐淏緯舏舐舐舐舐舐舐燮臯縏舐舐舐舐舐舐痯舐舐縐舐舐舐舐舐积緰舐舐舐舐縐舐舐縏舐舐舐舐舐縐舐舐舏舐舐舐舐舐縐舐舐緰舐舐舐舐舐舐舐臰舏舐舐舐舐舐縐舐縏訐臰舏舐舐舐积舐舐縮縏舏舐舐舐积緯舏踮縏舐舐舐舐积臰臯䷯縐舐舐舐舐积縐舐槏緰舐舐舐舐緯臰臰縏舐舐舐舐舐縏緰舏踐舐縐舐舐舐积舏縏蘐舐舐舐舐舐痏緯緯訑舐舏舏舐舐积縏緯舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐臰綰艓総瘏秫舐窌艌緰称舐痱腑釳訐緰觴舐縰舐舐縩爎踐湮犏緌緰爑疮縎癳熒緍訰痮疏緯熌燯癯芒燎臮蘰臮舱臏秮誱蘓縯穏綯綰舏痮舱臐色舑蚒緮薮舰綍総縏舒臰縏舐臰舒藰蚐蚑舱縐訴臰疰闒槰瘑良訰臭詓緰緯縐瘏父臐縐觰秩舐稏舏藯異爑觰舐纎旐秬舏断釭痎舒秱駱禯祭禰新藮臯秐舑綮舐臐舒臯緰訒縒縑藱綰縎舑蔱禮綎臐縑覐臯祭臱綍虮訏繐淰臐舐緐舓藌觳絰蘒緱緯舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐臰榱觲痮疍艐闰舌觏緰縏蘏痰舫緰稐跐觴舐臯舐臯蛐瘐訏縑贮臲総舯緱痳臏秖舳蘲緯綏臱禯舐臐穱致疐縐緐虔臭緱釰艓瘏稬駱縏虰綯旐藐驒許湐緯綯緱膯秐臏縐疯臰蘒藲虔藱舲総駲縐稰臰膍臲臯艭虫舑蚐訏縐緯臮燯踋鈬緯踯苎舐緯藰痯異臰觐涐緕舒縏臲綬禫総訰緱緎緯綯緰緎畮臯称秋秫舰緮稲綯舏緰艓舏舑艱跏臰足痮艑訲覌舯秮緎縰福蘍舎縑痊蘰訰舐訓綫縰踱蹳訌踐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐綱疐爑綰綎綏燰疲討秱疎犐綏臯科臱蹵藲燐福詓臮秮痏藱跱臏禮疯瘰疏痰爏痏熰跮痎燎窎痎緐痏蚎臏綰秌緎緍緎舏臯臍緯稑熮疎艐総臰膯緰訳鹏痏秏蹮禭緯臏牑舯緰积秒蘯縐藯臰縱鉲訐臯緐秐緯瘏舍舑舔薮緰綯穲禎縏藰藲秏薑觰藭騳緰踑躏縴縐訌禮爓蘍涰疮瘎税緰觯総疬称煫縏総疰痏禮臱縮穐痭縑蘎藰臯膰臐腐蘏禭総舑緰膱臍縐綏詑臎詐称縐秐臏蘏舏訑緭藱縐闳訑蘍舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐旐攰臏秐鈯稏臐瘒駱禰疯臐絮緯縐膰称綯臰瘏訒熰痐蘱縒秲藑称涍禱熯痯綰藎痱觐痏畯膯膱瘐総臲臐維秱腭稐趎秱臯瘐秮緐舯痎纔臏熮臐角舏踏舐痎臰淏臎緐藱臐藱稏蘐薱湐縐蘑藱縑觱臰緯觐緯禰緐臮縏緐臱痍藲膯異緐緱积称觰燏舓緮淏蕯訒緰祱痎秌舐秏涊痍臯疍藏积秮綐称熏熍膐禍禎称縎縏燎槰疮舏疮総踲舓舑緌憰緯許畯緐蘐緎臲縑臯臰薰熰縐訑臍藲痌痰訑踱禎舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐緰痱舐縰臱舏舐臱藲痰綏踑疯藔臰舰稔鈑緐禰詑臐藰蘐縒臱觴熮総綏痎臱訔艱舐鷲痏禰繑燎緯蘳話痏觰积綰舱秲臯跲臏緰縐許緯虱縐稑詓蘑詑銳藰舏舯縏舑訲踱訲闰蘐至蘰緳蘳虓藰蹓踓駱縑駶緱旐覯藱蘏渎緰疯訏膯科薰跲秎觱藲緱訒緲舒藰舴臯舐舎腫許疱爏舏縑臱踲蘐秒积秐痐臐釭秐臯縏緰許秐秐縑鈑舑縱藰藒鉓稱痱觐踒臲訐藐藯織觯臱蘰爳縐藐訑縒訔綰艒緱緒舑觯舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐藱臱総稲絯舐繏訏痰斎穐腮癯臯臰爋燏臰薬舒禰秓蘑蘳称舏臱稏緵臰繑臒虒臏舑稐痏縏榐穏痐艐臰秐舏痍舓臯縑蘑縱蘐痭蘲穏趏蘯瘐臰釲訯訲緐藭舮称緲縐詐稯臏舑藰該觲蘲訑躔舑舏臒跏觳跰瘯覲臲舓舳跱疍蘓秐縑燐縰訑蘰藐跫訳緐禰煌舓藑縐踲緭訳臰戍疎舑縒緰蘐税薱臎痯涬臯緰稐訑爬蘑跍臰縎虒縑舐蘲觮訒訑爰跲訓踏觰虱艑舱繑藏舐舱縐縏許蘫踱稫臲縑許訑臱菠䏠쿠樀寥컀韯䏩띀濠上욠淡翢몆溦娐訠鏠䯪슯錪矮똏鏐圫莠滀廉뺊憆竏츍瞩湍阡曊稏鈍艂菥늩癌瘐蘇芄爮鸎舏眏舐瘫姮鈠鏩劫닉諂毎鉍鼳䉏蘉荫戯踮誎濮똰縏舐訇骩湏蘏詭笏訏羭廊罀欠䨪왈燄篮먋芬噏舀戊痯鸎巎誮駮昊緰駪諅誮鈯騏纏訏詯瘮阠渫蹏訏差縏路目縏鸊莇瘏騬虁韣쩩蘫爐訉設舏踏燯稯舐舎痯鷅銫戎蘭騍艏鈏骐瘏騊舎緯路燯媐踐舐舐舐訫縏舏淎瘏蘏程懯闠韦䫭욮艪翯먍轱嚏蘠睉渎瘪瘌毮訮昏瘐舋麯戯訐骯暰舐눱昰瘪溊穎鸯旫暯訏晏渏縍皎縏舏蚏毰鸐鈱稐訏縯爐舐舐舐舐踐燰뗫銎瘏爍訨抯舏눰爐舏癎爏縏舯捑訐踐舐蘎缃普訏窎盏踏篍䛌殀䇬昏舎䧯縏舏䨏縏舍巯緯舏路뙯舏稏縐臯凯稏舏戏縏舏瘏縏눌䷯縏縏痯縐舐淯縏舏稏舐縏痯积臯縏縐臯懯縐舐縐縏舐爏縏騏䨏稏縏訏蘏舏戏稐縏燯縏舏臯舐縏爐舐舏淯稏舐緯縏縏昏稏鈇姯縏縏积踯舐縏縏舏稏縐舐緰蘐縐旯舐緯樏蘏縏臯縐舐戏縏縍緫똯帏訏蘏臯橎稏舌芋稏渭閧쯨馍槯稐臮淯舏昏姯緯舐懯积臌瘏縏縏緯縏縏昏縏舏瘏縐縐稏緰縐舐舐舐积縐縏痯緯縐瘏縏緭䇯縏縏嗯緰舏嗯縏縎淯縏縏緯稏臯渏縐舏䇯积舐痯縏舐爏縏縏娏縏縏緰舐縐瘏縐縐瘏縐舏燯积舏称舐舐舐舐舐舐舐舐舐舐舐嗯縏縏痯緰緯昏縏舏姯緰舏痯稏舐爏舐舏巯积縏懯緯縐䗮痯旦칰舯騏옏繏舏옐縏舏븐縐蘏訏幯舏鸏縐舏눐縏舐蘏縐舐爐縏娌옏舏蘏鸏舏蘏瘏縏稏鈐緯蘏騏漏蘏舐舐舏踐舐舏跰縐舐縐舏緯숐舐舏鈐縐舐訐舐舐鸐舐舐踏昐舐舐舐舐蘏舐舐舏縐舐訐縐蘐츐舐舏먐舰舏먐舐舐츐臰蘐踏舏舐訐縐舏鈐舐舐鈏縐舐舐縐蘏먐舏舐騏縐舐訐舐舐눐舐蘐쨰鬰訐鸐舐舐또縐舐踐縐舐訐舐蘏또舐舏訏舐舐舐舐縐舐舐舐舐舐舐舐舐舐訏縐舏蘐縐舐踐縐蘐또舏舏舏舐舏蘐縏爎阏舏稏鸏艏舐縐縐舏蘏縐舐騐舐縐舐舏稏訏舐舐騏縐舏舐舐舏蘐舐舐訐艐舐訐舐舐訏舐舐舐舐舐蘐舐舐芐눏娎阭繯蘏瘏縐稏鈐騏縏鸐艱蘐또舐舐纋鉎蘏阐縰蘏欒晓䛠츐縏踏또縏舐츐縐舏騐縐舏藯縐臰鈐舐舏츐舐舐阏舏舐鈐縏鈏츏緰臰舐臰舐먐緰舏騐舐舐숐鈯舏鈐舐舐븐縐舐舏舐舐訐縐舐츏縐舐騏舐臰阐縐舐鈐縐舐蘐縏舐蘐舐舐阐縐舐藯縐舐눐縐鈏舏緯舏积縐舐踐縐舏爏縐舏縐臯舐緯縐臯騏舐舐臰縐舐蘐縐蘐緯縏舐稐緰舐舐縐舏訏縐臯觯瘯藰釯緰臯鈏縐舐縐臰舐蘐緯舏똏舐舐臰縐舐阐縐舏舏舐縏縐縐舐舐舐舐路縐舏稏緯舐鈐緰臯츏舐舏阐舐舏븐縐舐옐縐舏鸐訐舐訐舐舏똏舐舐鈐舐舐蘐舐舐阐舐舐臰縐舐舏舐舐訐舐舐藰縐舐蘐縐舏舐舐舐舐舐舐舐舐舏쨐舐舐踐舐舐蘐舐舐蘐舐舐舐縐舐舐舐舐옏舐舏舐舐舐쨐縐눍츐舐蘐藰臰舐鸐舐舐駰舐舐訐蘐舐訐舐舐阐舐舐舐舐舐舐舐舏舐縐舐縐舐縐舐舐舐舐舐縐舐舐舐舐舐舐蘐舐舐縏舐舐舐縐舐츐舐舐阐舏舐蘐縐舏蘐舐舐舐舐舐舐舐舐訐舐舐舐舐舐踐縐訏츐臯觯츏蘰蘏츐縐舐駰舐舐臯舐臰阐舐舏쨐舐舐訐舐舐阐縐踏츐踏踐闰舐臰츏舐訐츰縏눐츲쿳또츐縐訏츏舐舐鈐縐舐먐臰踐츐舐舏鈐舐臰阐舐舐눐舐舐藰縐舐舐舐舐눐舐舐臰縐舐騐縐藰츐舐舐訐舐舐鈐舐舐觰舐舐舐舐舐舐舐舐訐舐舐舐舐舐舐舐舐舐舐舐縐舐舐舐舐舐舐舐舐臰舐舐舐舐舐舐舐舐舐舐舐舐舐舐또舐舐蘐舐舐蘐舐舐縐舐舐緰緯舐縐舐舐騐舐舐緰舐舐騐縐觯츐舐舐訐臰舐阐舐舐釰舐舐舐舐舐蘐舐舐騐舐舐蘐舐舐舐舐舐阐舐舐舐舐舐蘐舐舐舐舐舐藰蘐舐舐舐舐蘐舐舐縐舐舐舐舐舐阐舐舐蘐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐騐舐舐舐舐舐舐舐舐舐舐舐縐緰舐舐舐舐觰舐舐舐臰舐舐縐舐釰舐舐縐臰舐蘐縐舐阐縐舐路爐舐舐舐舐蘐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐먐舐舐舐舐舐蘐舐舐蘐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐蘐縐舐緰縐舐舐舐舐舐縐舐臰縐舐舐舐舐舏舐舐舐舐舐舐舐舐옏舏舐蘏舐舐蘐舐舏蘐舐縏稐稐舐縐舐舐먐舐舐緰緰舐숐緯鷬䈏爏舏䇯縏舏姯縏舏䇯縐縏淯渏舏樏縐縏旯縐舐淰縐舐稐縐臯䈏縐舏槯縐舐昏縐縏樐縐舏巯渏舐稐縐舏渐縐舐称縐舐稏縐舏䈏縐舐嗯縏舐緯縐縐刐縐舐痰緯舐縏舐緯昏縏縐淯縐縐䷯縏渎䈏縏縐凯緰舏樏縐縏娏縐縏稏縐縏渏舐縏䧯縏舐瘏縏縐戏縐痯䗯縐縐稏臰縐爐縐縏䨏縐縏䗯幏臯縏縐舏稐縐縐縏縏舐縏縐舏槰縐縐縏縐縐縐縐舏緰臰舐縏縏舐舐舐舐痯縐縐积縏舐稐縐舏縏縏舐爏縏舐蘐縏舏昏縐縐稐称舐緰縐舏踏縐舐舐縐舐舐縐縐娏縐縏槯縐舐縐縐舏爐縐舏淯縐舐蘐舐舐縏舐舐舐舐舐舐縐舏舐縐舏縏縐舏蘐縐舐渏縐舐稏縐舐舐舐舐瘏縐舐渐縐舐瘐稐討䇯縏縐槯緰舐瘏縐縐昐縐縏緰緰縏稐縐舏渐縐舐稐縐舐縐縐緯樐縐舐縐舐舐稐縐縏縐舐縐縐緰舐縐舐舐縐縐舐縐舐舐縐舐縏樐縐縐稏縐舐縐縐舐稐舐舐縐縏舐舐舐舐縏縐舐縐舐舐稐縐稏嗯縐縐稐縐舐縏舏舐縐舐縐縐縐舐縐舐舐稏緰舐縐縐舐縐舐縏䨏縐縏称舐縐稐縏縏嗯縐縐䷯扰舐舐縐舐积舏舐舏舏舐蘐緰蘏称縐舐縏舐舐舐縐舐縐縐舐縏縏舐舐舐舐縐縐舐緯縐舐縐縐舏昏縐縏縐縏舐縏縏縏瘐縐縐縐縏舐縐舐舐縐舐舐縐縐舐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐淰縐縏稐縐舐舐縐縐稐縐縐緰縐舐舐舐舐樏縐舐縐縐舐爐縐路䇯稐縐懰緰縏称縏縐樏縐縐縐縏舏縏縐舐昐縐縐瘐緰縐瘏縏稏䇯縏縐积舐舐槰縐縏瘏縐縐燯瘐舐縏縐舐稐縐舐緰舐舐縐縐緯縐縐舐縐縐舐舐舐舐稐舐縐縐縐舐舐舐舐縐舐舐緰縐縐緰縐縏䈏縐縏渏臰縏痰縐縏瘐舐縐縐縐舐縐舐縐瘐縐舐縐縐舐縏縐縏娏縏縏稏舐舐稐縐舏旰縐縐昏瘐舐舐縐舐舐縐舐舐舐舐舐舐舐縐縐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐縐舐縐舐舐縐舐縏䇯瘐縐䇯縐舏䈏稏税䗯縏縏槯爏舏瘏舐縏昐緰舐槯縐舐縐縐緯䇯縏縐槯緰縐淯縐縏帏縐縐旯称舐緰舐舏帏縐舐舐舐舐稐縐舏䇯燯爏䈏痯縏樐縐縏䈏縏縏嗯爏縐淯舐舏䇮巯舏䇯瘏舏䆮姯䆀臰脰舖舐舰舐舐舐舎楫僀菸舐艐舐舐舐舅隔胠뿹舐荐舐舐舐舍䀀脐舌兰臰舐舐舐舏䀀䀉淠儏蚐舑舐舐舆䄄腉帀驵艰藱舐舐舌쿿艰舗舐舐舐뷴臰舐콷돯苕舐艰舐敌秐緬쿿鏰컟舐茰舐븗総秫舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐燯縏縏舐苰舐痯緯緬舏舏縏舐舐舐舏舐緮舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐緯緰緯舐舐舐舐舐舐舐舐緯舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舏舐舐舰舐舐舐舏踐舏舏訐艰舐舐舐興榬胰舑舐舐舐舐舐舏愨䒁筳舐舰舐舐舐舀舏胠靱舐茐舐舐舐舊䀀熏舌冏臰舏舐痯舎䀀䀉懀峮苒舐舐嵩舃䀀礤䇠骘舐藱舐緯舉켺舐舑舐舐舐斐緰舏캴芐蚔舐艰舐䀅浐熅쿟艰빝舐舰舐斯緐兠僩臐舎舐臰舐舐舐舏䑨傏縏舐舐舐舐舐舎榍経舎舐艰舐舐舐舍䆭緰舏蘑舐舐舐縏舏䃇熯緬臐鍱舐嶭秏秅凉緯程븷花觱舏緯緬눒舐舐舐舐舐积緰舏臰舐舐舐舐舐淎緰緮츴繐蘒舐舐舐积臰痬舐舐舐舐舐舐舐舐舐稏縯舐舐舐舐舐舐舏舑舐舐舐舐舐舐舐舐淯緰舏舐舐舐舐緯舏憭総縏臰舰舐舐积舎緯臯舏舐舐縏舐緰舏舐舐舐舐舐舐縏緰舐蘐舐舐舐舐舐燏緯緭蘐縏舐舐舐臰縏緮緩陲臐舘舐舐舐舐舐舏縏槄菸舐芰舐舐舐與黶薄쯛舐菰舐舐舐舎䂦臐舏駳舐舐舐舐舐䀁偍緬騒뿴舑舐臯舎䅪祫縋콟轓釵舐緯舌쿿艰踓舐舰訐븓舐舐쿿쿰蝶舐苐舐擫秐緯쿿鿱컟舐莐닔눸緯綩舐舐舐舐舐舐舐舐舐臐緯臯舐舐舐舐舐舏蘏緯舎舐舐舐舐舐舏舐舐舐舏舐舐舐舐舐积緯舏舐苐舰緯緰緯积緯舏踑艐舐縏臯緯鈐舐舐舐舐舐縐舐舐舐縏縐舐舐舐緯舐緯鹒舐舑舐舰蘐緰舐緮뻘舰舑舐舐舐舐舐舐陓舯艵舐艐舐舐舐舌쫼舏븛舐舰舐舐舐舏嶯緰舐蘐舐舐舐緯舏䅮禯臭蘐詰縐舐緯舏緰臯舏鈱舰舐舐縏舏칒舐舐舐舐舏秏緰舏뻑蚏舐舐艰舐儎痐緊켙艰踒뉒蝑蘑緱緯淄緐膰舓舐臰舐舐舐舏疌崎舶舐舐舐舐舐舍蹔脌騸舐艐舐舐舐舎䆎臰舏淰臰舐臐舐舏䄪疯緭燯舐舏臰臰臮嗮臯瘊縐臰舏臰臰臯츑舐舏舐舐舐緯臰舏또艰舐舐舐舐燯緰臯칵舏訑舐舐舐臱臰秮斬臐舐藰舐舐舐舐舐嵍秏舐臯縐舏舐舐舏稐臯蘐舐舐臰舐舐舏懰臰舏緰舐舐舐舐舐燯緯緯緯舰舐緯臰緯积舐縏舐舰舐臯舐緯踐舐舐舐舐舐緯臰舏舐舐舐舐舐舐緯緰緯踐舐舐蘐舐臰臯舐緯舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐臰舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐臰舐舐舐舐臰舐舐臰臰臮涋腐舏舐臰舐舐舐舏敉䵉芵舐臰舐舐舐舄艐祇詒舐艐舐舐舐舊䄪緯舏懮臰舐臰緯舏䀀墍痦巏秐緯膐疭臊䄡綪淠芔膏臯臰緯臌븑舐舐舐舐舐槯緰舏问繯臲舐舐舐䃇禯秫컞良騙舐舐舏巋緯懁备臐舏訑舐舐舐舐舏兄傭虐藰艰臰舐舐舍稍絭虐阵艐訐舐舐舏䆮臰舏鈑鸱舐臰緯舏䂅疯秭駑뿷虱涬秏緪䧆緮瘊칾鮖踲緰緯緮칵舐舐踐舐蘐称緰臯鉰舰舐踐芐舐榮緰緮쾟苐鈕験舱踑称臰秭츳舐舐舐舐舐舐舐舐뺲艐舑舐臰舐舐舐舏치縐踒舐舐舐舐舐舏緰臰舐舐舐舐臰緯舏积緯舏臰艰舐臐积臮縐臯縐舐蘐舐臰緰臮騐舐舐舐舐舐緯緰舏釰舐舐舐舐舏燯緰緭븕舐舑舐臯舐緰縏秩鉓舐舒舐舐舐舐舐舐艐爎艔舐舰舐舐舐舎黖臍鸻舐芐舐舐舐舏懯臰舐踐舐舐臰臰舏䄭秏縐銐虰舐臰臰臰深緯緯몸舰藱臰臯臯칵舐舐舐舐臰臰臰臰쫒螏舐舐舐舐痏緰臰쿿譐눚舐艰詓藰緯緎崉臰舏멒舐舐舐舐舐嵋楯舐뉑蹐舐舐舐舏燊絎舏캛艐蘒舐舐舏槯舐臯跰舰舐臰舐舐斯緯緯膏鞒舒緯緰緯淭緯縏먴謲蘑緯縐臯츒舐舐똑舐踐称舐臯蹯諐舐蘏舰臰积緯縍콙芰踒쉵蚑먕緰臰緮츱舐舐舐臰舐舐舐舐빑艐舐舐舐舐舐舐舏쨶舏舒舐舐舐舐舐舏舏舐舐縏舐舐臰緯舏緰舐舐緯縰舐臐緯臯臰舐舐緰舏舐臰緯臯騐舐舐舐臰舏緯緰臯訐舐舐舐舐縏淏緯緭騒舐舐驒舐臰痏緯秈舑膐舒舐舐舐舐舐舐煭擮艷舐舰舐舐舐舍詳脮눷舐艐舐舐舐舏䇏舐舏舐舐舐舐舐舐䅌痏縏緐蘰舐舐舐舏姯臯緬踐縐臰舐舐舏츳舐舐舑舐舐釰臰舐먰誯舐舐舐舐臯縏緰캶艐訒舐舰舐踐舏緯舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐緯舐舏舐舰舐緰緰緯舐舐舐舐舐舐舐舐緯舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舏驲舐舑舐舐舐称舐舐藯积舐舐舐舐緯緰舏뉕臯蘑舐舐舐縐舐舏燯臰舏舐舐舐緰舐舐燯緯縏縐舐舐积緰緯縏臯舏舐舐舐臰舐緯鷰舐舐舐舐舐臰臰舏蘐舐舏舐舐舐緯緰臮踐舐舐舐舐緰舐臰緮涍膰舏舐臰舐舐舐舏愩悎繑舐舐舐舐舐舋縍腭踯舐舰舐舐舐舎䅌緯舏緰臰舐舐緰舏䀀岯痥称舱舐舐疍舌䖩緯稃訑臰臰舐緯舏鸐舐舐舐舐舐燯緰舏釐舐舐舐舐舐哪秐緮칖臯蘑舐臰舐淫緰秬䇎臰舏舐舐舐舐舐舐䔮綯縏舐舐舐舐舐舏凍緯縍舐舐舐舐舐舏旯緰舏舐舐舐舐縐舐斯緯緯訑蛱舐断緰緯痯緯縏鈑艐舐縐舏緯縏舐縐舐舐舐舏舐舐臰舐舐舐舐舐臰舐縏臰縐縏舑舐舐舐臯臮닗舐舐舐臰舐喭臰舏躱縏舵舐舐舐䂋禯緭늕縏阔舐舐舐巍緰燭䆯緯舏藰舐舐姏燯舏䃅熯緪臰舰舐䵌問秋爌緯瘉蘐艏舐稏緰緮阐舐舏舐舐舐燰緰縎鉐舐舐舐舐臰啮秏疦騒舐舐舐舐臰縓綯榣銓舐舕舐舐舐舐舐舐縍疭蜕舐芰舐舐舐舍髕絊싕舐荰舐舐舐舐减緰舏阐舐舐舐緰舐䀩擏縌늑鿑舐舐縐舏樰綰舌켙蚐蘒舐緯舏캶舐舐舐舐舐鸰臰舐쿖鏰芲舐艱舐絫縐縓쿿謰뙛舓花詒눑舐藱䆎臰舏舐舐舐舐舐舐䃭熯舏舐舐舐舐舐舐冪総緭舐舐舐舐舐舐旯縐舏舐舐舐舐舐舐兏総緯臰蛐舏緯緯舐淰緯縏踐艐臰緯縐緯臰舐縐舐舐舐縏舐舐臯舐縐舐舰臰臰舏积蘐舐舐舑舰蘐緰舐緬뜗舐舑舐舐舐痏臰舏虏稍艔舐舐舐楎痯臭뽵秭빚舐艐舐称緰緬䅌緰舏藰舐舐燯积舏䀃浏縉藰虐縐斏燏緎淬緯縎防舰舐燯緯緫츲舐縐舐舐舐淏緯懎윱誯舰臰舰舐䀬熮攣콛虐訒鉲芰蘑旑秌儀舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐腯姰舐姯甯縐臰縏舐淯緯縐緯斏臰舐臯舐緰緰舐臰緯緰舐舐舐䂬哊膲哎兎祯緰舏艐擮哊緱洮哫祎縐維臭舐积舑熯禱蘒臰艳艳畯浍詔煌浬膑緰舱虑疏甪舐禮楌腯臰緭緌舐臐舲藰縱藳舏艓蘓臯縐臰緯緯臯臰臯舐臰緯臰緯緯臰緰臰舐舐臰舐舐緯舐縐舐舐秏礎藶禯煍絎臯膲臐総礬臐緐畭絎総緎膌舐舏舑緰舱藱舐繒艓薯畋觔疭礫膏臰臱藱総絫藱疮綌絏秐綯膯舐緯舑臯舱藒臰繒蘳舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐緰臯緰緯舐舐舐舐緰緰緰臯緯緰緰緰舐縐緰舐臰緯縐舐縐舐稒畱誕緰秐緐詒縓蚖緰総舐緰禎膭縐禱緎舑秐芔藱縒舒訲舕艳蘑礰蘷縐緱網蘒舵蹕緯総縏緯綍膭臰秐緎舑緱虶舑繳舱臱舵詔舔臯뗰舐臯舏또臯訖舐臯臰緯緯緯緰臰舐鈐臯舐緯緰縐舐緰験訔畭鉕臰种緎蹵緓鉴緯綮緱縏福綍称禐臎訓緯誶緰艱艐蘲縔陵칺網몹臰緭縏먹蘔븵緯総蘐緰綌綌踒禯藒騸臐몹臯繐艒鈶蘵몘舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐䄰啬緰咮傮臰臰科舐哰夭縏壏棭膳痰浐觳燐秏舐楏祱綳許緒膳䂫䣩煎䣋䣫畎燐畎薎唍壨秏峫崪楌槐楍煭涯浭舒攍浏禰秲禐禰敮泮蹳椌椮蕰舑臮鈑煯焍詑洭疮趐緱臮走臱禎虴痑蘔騴訔驴눑称緱觲痮秏緐訐縐藰臰緯訑淎禐膰鈔禰釓訑舑訒藰臒踵阔膲駓禐瓫蘓熎惪界緰臏腮秏礫藲植慫界緐界焍舐緰蘳秏疏膎臲疎薯臐礎闓業礍腯藱臰薏緐礍訓煌膯膐藲綐襰蘑臰鈕藯踴鈓鸗舓鷒舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐称积臰秐熰臯蘐緱舐秐痏緐愰楱痒緐楏禒緰縐緰福疱角騑科膓秐煎緰痏愍膭蘱疰膑燐焎総崯嵬祌臱楌洍臰禯舒浰楯綎蹓熎禯臰禭臑緯浍膯藱臯鈳緰祮臰福熯膐觱膰覰舐臐舓藰禲訓訴舒陒觲臯跑痯秐総釲緰鈕臰縏跱涯禓禐觵禒跓釳臰阒痏痱踔阶禰釕秏祍福禯沩洈称泍絍秏瓎絰棎啪壪煯惫椌緯緎臱痎敍畮縑慎疐駳綰陔燍泬礬鈳累闒藐祮跒煮秏絯蘲蕱蕱鈔緰鸶熍練釓뉷膐駲舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐疰燑縐涰浏臰訐舑藱涐榯緰椮浑藲訑煯觐緰燐舏畐熑薳鈒藳薓斐業臲涎榱舖蹑虶鉸浯愮臰崌新緳蹓涑腰秱熱蘴禮秔秔踴舔蘑蘑蘓處藰艕鉙蘒鋷鋚舐緐舱臏觳鸵許訴驕蘑致訹踔陷麘阹뚸몴藰緰蘐积緯臐藱縐跲臰臰臯族經藑蘓疱角藱臱訑臱薳阕鷶覱闔臰緑虒秐涎舐舐舒鉕緰綏緱畮榭綰称疐薲舐緰蘴痐痲縒蘓縓踒藱臰踵秎緓觲訑繒鹗緰綯蘒熍蘒踳釴舳阔跱舑踷緐鉗陵눖虵뉴舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐藰疰臐痯称臯訰臱蘑痐疯総楯斑網称煎綱緰痏舐浯涑藲鈱緲藳臱榑蘷秐稓臰陔舔虗秐浏緰意憱綐稐涐煮舑疏虗禰痴舓蹵縓縒藳福誘臰縴縑踳詵麸緯禎臰綰稒訳蘑縳訓蘑禰蚖臱蹗詵陗詵麔췶臰면緰緯藑먺緰븺跱緯蘑痎綒膱阕膒藔맸舏뙖觰疐釵똙綒陘騴熌鈸総淏縰陷秴阶緐祬蘳畯巏敬觑敮祯踔痍蹗臐燴縰鉖燳訲캚踵웘跱稳訵욙訵욘鈒綯鉔薰藲藳驗藲鈕멗蘑뛸闱蹔陕늘陵늶芋企쏇洢仢쩡鎶䟌쎨晧䇦骤泤缡똂溩到跠鬌杪켰鋊珰븎鍸宯菆斤媇늈僄瘬었盬晭銄刈淭訫畃笠누繍爐臄膧樌눯綮皯舐瘫䇮門魲廫뜋詨潫驌뽹䫱詮茒帎陯誎毳츰舲舐訊뻯皎鉐艍罱踏讕彯蟦清䈧멨炄漋릨芎䪮虦冨燮踋啍爪鶌懨痰镅諆蛭鉯騎缏踏諔皏躢涨繭討喌緯釮盍稯鈩皩懪躊超迡쥢虫成趣觩舎阯福痰舐舍嶯낡鋎測蹌騌芮騍鼔橯먬縏緯踏祯䉒阐舐舐舐臈瘮訏椌憱舏稬䆮鑀鍏囬켎舫第옪轻囲銇眩渌穈畩玪訋是爐與뻲犏踰黰歕訐멕扳躮温牭鉮慧噮阌景晏縪绱瘏訮虮毽츲陷縐鷒舏爏舐舐舐舐蘔槰춭鋲瘯艌詉滎蘎멳渰舐盐樎縯艏忚눒蘓舐觰諊犫麰窌玒鸏獓䞴珀䶪帎舎䇎积臮嘎稏縍娍积舏総黯藯爏緰臮巯积舏淯稯舐瘏稏訋䇮积緯燯緯臯淯緯緯淯縏縏懯燏臯痯緰臯巯緯臯緯緯舐槯緯鷭旯稏縏藮蹯臯爐瘐舎樏縏舏臯艐舏燰舐臯痯舏舏瘏舯舐爭税鈂䷯稏舏涏陯臯积縐舏痰縏縏緯訯緯嗯縐緯渏踯舐臯舯縏渐縏蘊縇麍瘌燭觏緭犫穎稪穨燮溧販쯠찂槌槰蔨榍舏懮䇯秏舐巍淮腤燯积緯緯舏緯槯縏舎痯縏縐痯称縐舐舐舐緯臯緯懯緯舏燮积秄䗎稏縏䧯緯臯嘏积緭昏緯緯积稏臯旯緰臯䧯痯縐槯縏縏淰縐舍凯縏緯痯緯臯燯緯舏燯縐緯懯槐舏緰舐緰舐舐舐舐舐舐舐舐舐姯积积痯縏緯戏縏舎䇯縏緯巯淯舏槯舐臮巭积緯䇯积縏䗫淯䆀슲舯눯먯艏蘏츱縰蘐눐縏蘐訏皏蘏鈐緰蘎뙏縏蘐踏縰舐舑稐戈騐舏蘏路縯觯稰縐爌訐縏縏蹎澯蘯訏緰縎阏舏舏跰縐舐縐縏緭츰舐蘐鈐舐舐踐縐舐눐舐舐阐扐舐舐舐舐鈐舏舐訐縐舐鸐縐踑쨱舏蘏먏艐蘐옐舐舐옐臯訐釰繏臯阐舐舏騏舐舐騐縐舐蘐縐蘏또蘐蘐鸏縰舏訐舐舏뉐舐蘐쪐쿳鈐츐舐蘐츐舐舏阐縰舐눐舏鈐븐舐舏踐縐舐訐縐舐舐舐舐舐舐舐舐舐舐踐舐舏臰臰舐鸐縐闱숐縏蘏蘐舏臯鈓縐樌鈏緯爎釯窯舏縐舐縎觰舏舏먐舐舐舐舐瘎踐舐蘐阐縯舏舐舐縏舐舐縐踰蝱蘐鸐縐舐訐臯舏舐舐舐訐臰藰茏詯手躊蚮蘭蹐艐瘑陓鸰縏뉑荴鈰츐舐蘑蛬錊踰陱競阐狚䎿䟠鈰瘏阏舏縏藯먐稐舏瘏緯舏痯舏臯藯縐臯븐縏蘐騏縐舏鸐縏눏踏臯臯痯緯臯또舏舏舐縏舏阏躏訏鸏縐臯눐舏舐臯緰舐騏緰觯눐縏訐騏舏臯鸐縐縐瘐緯舐縏爐臰舐舐臯鸏縏舐积縏舏駰縏鸌昏积蘏凯爏臯蘐縏舏姯縏緯燯緯臰淯緰臯踏縏舏臯縐舐訐縐釯巯稏臯槯緯緯渏緯縏樏緯訏熎囮醯踐緰藯鈐縏舐淯緯舐觰緯觯騐縏舏臰縏臯鸐縏舐痯緰縐燯緰舐舐舐舐觰舏臰懯緯縏鈏緯跌옐臯蘏鈐縏舏븐舐舐鸐縏藯騐阯臯踏縐臯븐舐舐눐縐舐踐舐訐闰臯舏緯縐臯蘐縏舐訐縐舏踐稰臰踐緰舐蘐緯舏舐舐舐舐緰舏븐舏舏騏舐舏訐縐舐蘐縏舏臰稐臰舐舐舐쇰蘐舐蘏縏舏먑縐駥눐舐蘐藰舐臯鷰舐舐釯緯臯踐鉏臯跰舐臯鸐舐舐蘐縐舏蘐縐踏緯緯舏縐臰縏舐緯縏縐舐舐緯縏臯舏臰臯臯舐臰緰臯舐舏臰藯븐縏臰鸐蘐臰鈐縐舏舏縐舐舐舐舐臰舐緯鈐舐舏蘐縐舐阐緰눏鸐縏訏눏蹯訏또縏舐藯緯蘐緯稏藯踏縐藯븐踐舐阏舐舏騐舐阏또鹏鈐藯蘐觯옰舐阐뚓稏옰컺쿟컸츳稐븒츐訏訐觰縰舐쨐縐뷰츐蘐蘐눐蘐舐먐舐舐闰緰舐緯稰蘏舐舐舐븐蘐舐痯縐縏숐緯鷍쨐舐蘐阐舐臰鸐縐舐踐緰臯藰訐臰訐緰舏鸐舐舐踐舐舐蘐舐訐蘐縐緰緯舐舐舐緰舐舐緰縐臰縐舐臰舐舐舐舐舐舐舐舐舐舐舐옐舏臰鈐舐臰踏舐舐緯緰舏痯縐舐緯舐緰븐臰舐痯緰舐옐緰엧쨐舐蘏踐舐臯눐舐舐釰縏舐臰舐臰踐緰臯눐臯舐訐縐舐訐緯訐阐臰舐臯舐舏觰緰臯蘐舐臯鈏阰舏蘐縐臯踐舐舐舐舐舐蘐縐舐또舐舐踐舐臰蘐舐舐蘐緰舐蘐縐舐舐舐舏訐舐舐臰縐舐阐縏蘐路緯臯痯縏舏蘐緰縐积縏縐緰緰臰臰縐舐觰緰臰臰縐舐舐緰藯臰緰臯燯緰緰臯緰舏舐緰蘏涯䋰舏藰舐舐藯舐舐舐舐舐臰舐蘏舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐옐舏舐踐舐舏鈐縐臰鈐縏臯蘐蘐舏蘐舐臯踐舐舐蘐舐舐舐舐舏緯緰臰槯緰舐臯縐臯称緰臯痰昐舏稐縐舏臯緰舐舐舐舐縐緰臯쨐舏舐闰舏臯阐舐舐燯緯縏嗯淰舏瘏舐緯츐舏舐䧏秏縏짱燯쳠渎樏訏嗯縏藯縏稐舏凯积舏懯帏舏昏縐臯訏縏舐稐縐舏訐縐縏巯痯舏懯臯臯昏縐縏戏縏舏旰扯舏蘐縐舏訏緯舐緯縐舐舏緰路爏縐縐姯縏縏訐縐舐帏緯縏昏瘐臰縐舐臰緯縏舏戏縐舏樏瘏爋䧯稏縐凯緯緯渏縏舏凯縏緯燯痯緯巯緰臯懯稐舏爏縐舏旯縐樎凯縏縏痯緯舏昏縏縏䷰緯积嗏材臯稏縐舏积縏舏緯緯舐縐緰藯槰縏縐积緯舏舐縐舏积縏舐緯縏舐舐舐舐痯縏舏燯緯舐燯緰藮騏稏蘐稏縏舏븐縐踏爏縏舏痯渐臯縐縐臯또舐舏鈐縐舐踐緰舐旯縏舏懯緯舏緰縐舏痰緰縏渏牱舐鸐舐舐訐舏舐舐舐舐踐緰臰눐縐蘏鈏舏舐阐舐舐淯緯舏瘐瘐舐鈐舐舐阏瘏舐燯稐舐踳渒먨䗯稏縏巯緯緯燯縐緯巯緯縐痯痯舐痯縐舏淰緯舐燯縐舐緰緰緯姯緯緯积緯緯燯縐緯痯縏縐槯积舏縐舐舏积縐舐縏縐舐积縏臯槯縏緰痰縐舐縐縐縏燯縐縐积緯舐緯舐縏积縐縐积縐舐渏縏槮䧯縏縏淯緰臯燯縏縏燯縏縏緯縏舏稏縐縏淯縐舏积縐舏稏縏积䗯緯縏槯緯縏槰縐縏䇯緯縏䗐䏸踐옑舐蘑踐舏舐訏舐舐먐縏鈐舐縐舐縐縐舐阐縏舐縐緰舐臯縐舐舐舐舐藰縐舐藯縏舐觰縏駯爐縐舐积臯舐訐縏舏痰緰舐緯稐舐緰縐舏蘐舐舐緰縏舐舐縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐緰縐臰縐縏舐踐舐舐稐縏縐緰稏縐舐舐舐緯稏臰称緯舐鈒縐취巯稏緯懰緯緯称縐縏懯緯縏积爏臯积縐舏渐縐舐燰縐縏燯縐渍凯緰舏淯縏舏懯緰积淯縐緯槯帏臰积縐臯縏縐舏縐舐舐緯緰緯舐縐舐緯舏舐舏舐縐縐縐縏縏稐縐臰舐縐舏緰舐縏縐縐舐縐舏䗯积緯懯緯臯槯縐緯懯緯緯积痯縏燯縐縏燯縐舐痯縐舐称縐痯䧯緰縏爏緯縏淯縐緯凯緯緰䧯䬐臰訐縐臰舐縐舐舐臰舐訐縐臯积臰舏縏緯舐舐縐舐舐舐舐舐舐舐舐舐舐緯舐舐緰緰舐緰縐臯懯瘏舏姯縏舏帏瘏爌凯緯燯旯樏緯樏縐緯稐积舐爏稐舐舐稐蘏䇯积积嗯緯縏巯緯积凯緯积䷯扑舐訐舐臯槰緯臰舐舐舐舐稐藮姯淯戍䧮槯緯稐瘐积䇯痯瘏䗯刐臯痰舐臮妋䧮蘏䆎冯蘏䂨䃨䀁臑胰舘舐芐舐舐舐舋惫䁠获舐膐舐舐舐舃麘脂쿼舐莐舐舐舐舓沲膐舎慯臐舏舐舐舏䀅屌淫䠍緰舏舐舐舄緙臍牨骗蘰藎舐舐舎醺舰舓舐舐舐鸔舐舑胑軬艑舐舰舐攋稱秮콟銐뉽舐荰舐왟縏臰舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐淮舯縏舐茰舐燎縐緪舏舐縎舐舐舐舏舐緮舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐积縐緯舐舐舐舐舐舐縏舐緯舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舏舐舐舐舐舐舐蘐舐舏舐舐舐舐舐舐舐舐舐舐舐舐舐舯舐舐舰舐舐舐舏鈰舏縎踱芰臯舐舐舆愌耰舏舐舐舐舐舐舍咦䀀獱舐脐舐舐舐舀臐肀돳舐茰舐舐舐與䀆浯舌䣫臐舏舐燏舍䀊䀉姤吇淰臏舐䤊舁䴱礈嘁隶腮薋舐緯舆胐舐舐舐舐舐斎称舏搉繯縲舐艐舏䀅椐椨솔総鈒舐舰臯槔綯夣䀥脰舍舐臰舐舐舐舏䀀䀌繈舐舰舐舐舐舉崋琧艋舐苰舐舐舐舌巑臰舏緰舐舐舐縐舏䄰烯縈泎譒舏䥉疯畩淙総縈똹蚒觰縏緯秨跰舐舐舐舐舐称緰舏綯緯舐舐舐臯榭緰緪먒芯舴舐舰蘏称緯痧舐舐舐舐舐舐舐舐舐燭綏蘑舐舐舐舐舐舎舑舏訔舐舐舐舐舐舏淯緰舏舏舐舐舐緯舏妍絏舍臯艰舐舐疏舌臯臯縎舐舐舏舐緯舎舐舐舐舐舐舐积緰舏絏舯縐舐舐臰榏緯緩藰縏臯舐舐舏緰緭秡鹷舐舞舐艐舐舐舐舏緱嶀菻舐茐舐舐舐舆묺跄쿿舐菰舐舐舐舗緹臰舏騳舐蘐舐舐舏䵳涯舑镱랖舒舐縐舎髟膮舌콟零闷舐縏舍켿艰鈔舐艐踑욘縐舑쇖믏蛷舐茰舐椪窓縴캿띰컟舐菐욷묟縑釰舐舐舐舐舐舐舐舐舐臐畯舏舐舐舐舐舐舏蹐秏舓舐舰舐舐舐舏舐舐舐蘐舐舐舐舐舐称縐舏臰蟐艐緯縏緯舕臯縎阓苐舐緯緰緯鈐舐舐舐舐舐縏舐舏縐舯縐舐舰舐緯縏緯뙓繏舕舐艰訓縐臰緬콞艐舖舐舐舐舐舐舐늗芍謞舐艰舐舐舐興쿿苭칿舐苐舐舐舐舎燰緯舏藰舐舐舐緯舏喯絮縊藰謐舐舐稏舎舒緯舐陒芰舐舐縐舏뇑舐緰舐舐臯臰緰舏郑苯舑舐蛰舐壎痰禫췶苯踘웕諔訒鈹縏疥祰腐舕舐舐舐舐舐舏惧䒌芔舐臰舐舐舐舊躘脩멘舐苐舐舐舐舎喯臰舏淯臰舏臐臰舏䃬禯緮嵯緰臯臐舰臬縔舯縌蘐臏緯臰臰臏痰舐舐舐舐舐臰臰舐妯繏舐舐舐舐燏縐緰뙖膯稒舐舰舐鈔舯緱嵊膰舐鈐舐舏舐舐舐䑨擯舱臯縐舐舐舐舏艒臎訔訐舰臰舐舐舏燯舐舏积舐舏臰舐舐淏緯緯秏艐舏积舰緯縐臯縏舐艰臯舐舐緯蘐舐舐舐臰舐臰舐舐舏舏舐臰舐舏緰縐緯踐舐舐訑舐舎臰舐縏舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐臰舐舐舐舐舐臰舐臰臰舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舏舐舐臰舐舐舐緯舐舐縏臰舐臭峧聰舍舐臰舐舐舐舏咥䂀缱舐脰舐舐舐舀縐磀鋲舐臰舐舐舐舆䃩総舏䅫臐舏臐积舎䀅敒燰䁤堊綫脐梨腁淒綊瘃溮簊絀臐総膨妫舐舏舐臰舏懏緰舏䀀癏榮舐舐舏䂅痯燭礍腏夌舐臐舏旑緯姀䲇胰舋燱舐舐舐舐舏䂀䀆猊愯蕐臯舐舐興燍沆錰뉹芰踐舐舐舏䦭藰舏緮뙒臰舰舰舑䅊岮樃簈믿躘悥癖燖瘳膬渀썟쯽뇶臰舓臒鹓舏蘐蘐舐蘐蘐舐臰蹐绐蘑訐艑臯懰綯緫쮜蟏鸿똷蘒鶍鈿臰緩욖舰舑舐舐舐舐舐舏뼴謏艕舐臰舐舐舐舌컿艐뉙舐臰舐舐舐舏緰臯舏臰舐舐臰緯舏緰舏舏禯芒舏腐淑臍舐舐舐舐話臯舐緰膭訐舐舐舐舐舐緰緰舏薯舐舐舏緯緯旯緰緋鸕舏舓舐腏臬蘕緎痂銘艐舗舐舐舐舐舐舐稐懋苺舐艰舐舐舐舍뜺訫캿舐莰舐舐舐舐稐舐舐鈐舐臯臰舐舐族稰縒隱蝐舐臐臯舏髟舐舏묚臐觯臰緰臯멓舐蘐舐舐蘐訐臰臰焐莏縑舐舰舐秎縰縓靺訏絵舐荰髚눻舐蘗愫臐舎싕舰舐舐舐舏僅䒌艐뗲麱臱舐舐舎種碪鹕쾿蝳騷舐舐舐稯臰臯藏良臰臰舐舐憎禯縏氌鏵艷総縐緲瘑緯縎鷒髴阔臰縐臰醱舐舐븳舐阐舰舐舐祍韏舐藐蘐腍痯緰緈븏議鸼쭾跒顩舔緰臇칓舐舐舐臰舐舐舐舏컴謰艓舐舐舐舐舐舎캿艐踙舐舰舐舐舐舏踐舐舐积臰舐臐緰舏舐舐舐煏緯臯膰総膯舐舐舐緰舏舐臰緰臮踐舐臰舐舐縏緯縐臯脏蘯縐縐膐臯族緰緊饭舰舑雗聮膩縕緍疀蘔腐舕舐舐舐舐舐舏烫哭苖舐舰舐舐舐舉鼘腫쩻舐芰舐舐舐舐觰臰舏緰臰舐舐舐舏夭薯縒浯臐縎舐舐舎똒臯舍踑臰臯舐舐舏먒舐舐舑舐舐鈐舐舐腯良舎舐舑舐积舐縑칸舰蘒舑艰舎눔縐臰舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐緯舐臯舐艐舏緯舏緯舐舐縏舐臰舐舐舐縏舐舐舐舐舐舐舐舐舐舏臯舐舐舐舐舐舐舐舐舐舏舐舐舐舐舐舐늵舐舒舐臰舐淯舐舏維畯舱舐舐舐痯緰臮쫼臎騘舐舐舐縐臰臯积臰舏緰臰舐緯舐舐燯緯緯緰舏舐痏縰緯縏臯縏臰舐舏縐舐緯踐舐舐舐舐舐蘐舐舏臯舏舐臰舐舏緯縐緬鈑舐舐蘐舐緮蘑縏緭泫脐舍舐臰舐舐舐舏墦䀊皎舐臰舐舐舐舂蘏肨麑舐艐舐舐舐舌喍积舏痯臰舐舐积舏梤腔瘏岎礏緯舐撩舄跷臏縃蘱膏臮舐緯舎藯臯舏舐舐舐淯縐舏搉縏緯舐舐臰咧瘐緱騑膯藮舑舏舐槊緰秥䆍臰舏舐舐舐舐舐舐䀊烏緭舐舐舐舐舐舎䅨綍瘆舐舰舐舐舐舏燯緰舏舐舐舏舐舏舐晔総緮腏诳艑椉绒縼縗臯税騑花臰臰縐緳燯臯縏舑舐臰蘐舐舐緯縐縏舐舰臰臰臰縏緯緯緯舒舒舑踕縐舐麖舰舑舐舐舐䵉臰舎蘮慍蚺舐臰舐䀂攎禄뽙縍쩻舐舰舐妰緐懊淒緯舏緮臯縐冎槯舏刏恮痤絯缑臰䐤曜熱處緯樁訐英臰秱繕积蘎舐舐舐臰舏稑緰縌觏舯舐緰緰臯憱楯敨鸳舏蘒舑膰臯鉿紌浀댘艐舜舐舐舐舐舐舐舏涨蟹舐茰舐舐舐舐뭚臆쿻舐菰舐舐舐舖뚒縐舏鸑舐舐舐縐舐虗뙷縕駑럱舐舐縐舑쿿防訍콛蹐訐舐縏舏컘舐舑舑舰蘐캔縐舑醱讏芳舑苲舑鈪菵芿콟跰馵舗菕雺콼芒뚿䤫臐舎舐舐舐舐舐舐䀈峍縍舐舐舐舐舐舐兦絍瘇舐艰舐舐舐舐痯臰舏臰舐舐舐舐舐慏綏縏祏讱舱緯繰縕稒緯縏騐芑臰縏舐舐臰舐縐舐舐舐緰舐舏緯緯緯舏艒臰緰縐痌臰縏縏舕艑金蘒舐綫쌛芐舘舐舐舐跐臰舏蹑渆錻舐舐舐峌燯緪쿻躧켿舐苰舐鸖縐秵憍积舏积臰縏积积舏䑣怎稁氎苐緰夎打禯燭秏舉鷰芐舒痯縐緍왒舏称舎臐緮舰緰妭覎鏯繲緰綱綏䰅崰䑀캵鞏눺齚贱褭苿烫吀舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐緯縏縏皅加鹣皅䩡蹢臯縏舏昤书骅犧剣誅舐舐舐舐舐舐舐舐舐舐縏舏輊睋뾌魮杋쌬舐舏舏譋玬쟌譋掌뿪舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐瘋戌爊橤幢늣纆乡髆蹎瘏阏樃䨤髆芨䩣黆舐舐舐舐舐舐舐舐舐旫娎渌樥乄黇芩乥黈訯稯阏樥剤닦苉亄黧舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐瘎樏蘎绉挈썫靎弨뽬骐鉯똯苊择썌靎按썭舐舐舐舐舐舐舐舐舐爭樏訏苪挩잌鞏朩읮誏躯鹯茫朩쏌靬徊뎬舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縏縏縏懮懭緮樎痭緬縐舏舐姯淮緭樏秮緫舐舐舐舐舐舐舐舐舐縐舐舐瘏稯舏鈏縏訏舐舐舐稏繏訯踯縯뉮舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐凬戎巬工冁藃戆䆣舄瘏稏舏䶧䅨秥懧䗄臣舐舐舐舐舐舐舐舐舐䷮渏瘏䧊䅊秩懫䷫臧爏縏舐凋䖫編旫凧緣舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐䧯瘏瘏䷋䆉自巭姬舉昏縐舐䷭䶭舍明槭蘉舐舐舐舐舐舐舐舐舐凯稏縏䧭䗍臭懮槭蘋懯縐舏䷮凍縉希槨秢舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐縏縏爎帬舎蘏瘎舍舐舏舐渏瘏舏訏縏蘎舐舐舐舐舐舐舐舐舐舐舐舐阏芐蘰또艐鈰舐舐舐阯艰詐鸰舰鹐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐鸐縏舏뉯螰雰숰苏빑븐舐蘐鸰窏限왐艐쩑舐舐舐舐舐舐舐舐舐騏縏舐騯竏限쉐艏쉒옐訐訐뉐经뙰슑纰컓舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐踏緰舏骐莐뼐뺑苰쪒숰訐鈐麐茐슐욱蛐캵舐舐舐舐舐舐舐舐舐訏縏蘏鼐莐쭱쌒蝐컴빰뉰鸰鼯罯쾒덐箑뿓舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐舐舐舏縏舏舏縏舏舐舐舐縏縏舐蘐緰舏舐舐舐舐舐舐舐舐舐縐舐舐訏舏舐鈐舐蘐舐舐舐蘏舐舏鈐縐踐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐鈏縐舏路繯踯騏稯鈐눏舐舐蘏稯蘏鸐縏눐舐舐舐舐舐舐舐舐舐蘏縐舏舏瘯蘏騐縏鈐먐舐蘐蘏稏訏또縏똏舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐鈐舐舐鈏艏蘐먐縐鈐븐舏舐阐縏訐숐縐눐舐舐舐舐舐舐舐舐舐阐舐舐阐縰訐먐舐阐먐蘏蘏騐縰鈐븰舐먱舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐臰舐舐舏縏舐舐舐舐臯舐舐臰舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐踐臯舐舐舐舐蘐舐舏阐舐踐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐阏緯蘏蹮狭웎뉐犯쉰먐蘐鈐訯橏騯똯穏숰舐舐舐舐舐舐舐舐舐踏緯舏蘯湏鈯鸏瘯눐옐訐踐踏瘯騏똯稯븯舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐踐縐舐踯皯驐또縯鸰먏臰訐踏縯訐또縯먐舐舐舐舐舐舐舐舐舐路緯舏踏穏訰눐縰騐숐蘐蘐鈏縯阏숐縰숱舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縏舐舏舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐蘏舐舐舐舐舐舐舏舏踐舐蘐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐踏縏舏阯竐鸯븐繐눐숐舐蘐騏縰訐숐縰븐舐舐舐舐舐舐舐舐舐鈏縐舐騏縰訏먐舐鈐쨐蘐訐鸏縐踐쨐舏숐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐踏縐舏騏艰訐븐舯鈐또舐蘐騐縐訐븐舐鸐舐舐舐舐舐舐舐舐舐鈐縐舐騏縰訐븐舐阐츐踐訐鸐縯騐옰縯쨲舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐縏舏淯燯臯稏縏緯舐舐舐淯积緯瘏緯縏舐舐舐舐舐舐舐舐舐縐舏舐积縏舐舏緯舏舐舐舐縏縐舏縏縏舏舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐嗯稏稏凮嗎緯旯淯臮槯縏縏嗯槯緯樏痯臮舐舐舐舐舐舐舐舐舐凯縏縏䷯巯臯樏痯舏淯縏縐嗯淯臯渏积縍舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐嗯稏緯姯娏舏稏瘏蘏稏縐臰昏淯舏縏稏討舐舐舐舐舐舐舐舐舐帏縐縏戏巯舏稏稏蘎渏縐舐昏淯蘎爐爎舌舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縏縐縏爏积緯縏縏舏縏舐舐稏緯縏縐緯縏舐舐舐舐舐舐舐舐舐縐縐縐縏縐舐緰舐舐縐舐舐縏縐舐緰舏舏舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐䇯瘏燯䧮䖮舎懯旯舎淯縐舐凯槯縏昏痯舎舐舐舐舐舐舐舐舐舐姯积縏凯懯縏旯痯舏爐縐臰凯淯縎昏痯緬舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐䗯痯稏䗯䷯縏戏燯臯渏緰舐嗯淯縏昏瘏舎舐舐舐舐舐舐舐舐舐丏稏縏䷯凯舎昏痯舎爏縏舐凯巯臭樎戎藩舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縏縏縏槯燯緯稏縏緯縐舐舐燯緯舐縏緯縏舐舐舐舐舐舐舐舐舐縐舐舐縏縐舐縐舐舐縐舐舐縐舐舏緰縐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐䷯稏稏䷯䷎臮渏樏舎爐縐舐巯旯臮爏瘎蘍舐舐舐舐舐舐舐舐舐嘏瘏縐姯嗯舎爏瘏舎燯緰臯姯懮舎爎旭訊舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐䧯燯瘏娎刎蘎爏昏討爏縐舐戏帏討税渎鈍舐舐舐舐舐舐舐舐舐嗯渏稏娎与蘍瘎明阍樏稏舐巭䷬踊爬䨩蹈苉廧댈爆嫠鸣輯掎럨晧嗥諅椥竡駂皈成釁鬌睉뭐諫濑鸏靖枱蟈斨噈虊奧燅跆皫滎讦嘉淩稬疧眣阦穌淰规臈爭鉮熭犯舐繫䷭馤髲窭뫭誊眢鈩뜔猱轑英測蹎芌杲쉐蹒舐踊뫏虮鋐虭睱鈐謒欮讆爉娨躨椦暣釅艮欮罈妉痬縊啌帡褆旉稐蒡説蜍鋐詎篲踏鋵羳诈楊橌舭喌絋薪溌穯茇皋巈苫觫讇눧艊娐駆自縮鉯綏癴舐舭巎녆誰穭鉍詍绬踍鬓眑鼱爎緯藯絯䚷鈑舐舐舐藫繮躐热婕舐繬凮듣軏狪뛮般若阦霶潑鮊癪淩穇浈盡膂瘭爐薠뛓芯詰髑篚蘏멵眷돎痪湍虌文懆觇癍牏艨窐燫般艬官븰蹘緰땍踯稐舐舐舐舐舔淐줊隵繎陭鉫缇蘌멳窲芕纰渌舮艎張눱舓舐襬誋纈닱纭朱똏皐弎眃嶩昋舭姍緭緬爎縯縬嗭秮税榎笪臍淮称緊积稏舏稏绰舏縐窐蛬嗍秮縏痯緯臮淮縏縎淯緯縏嶭檉臍燮緰臌淮縏舏緯緯舐淮积跈瘏稏蘯藮蚮臯舐穰艐爏緯舏緯笱臰稐舐臯蘏蘯舏縏芰舐繮穮諨姮縏舯敮芮臯舏繰良燯縏縏緰窎臯懯緰臎瘐虏舐縏苐舐縱芑謍禉窊稉嶉禇綅皫笯瞌癋槩皩襐鯨遈姅慰萆攋稍爍䖭浏舐巋態聅淯縏臯积舯臯称縐縐燯緯緯痯淰縐舐舐舐痮舏縏姎秐縏旬痏碦懍縎舏槮緮臮淯稏縍淯緯緯积穭臏燯緰緭燯稏縐痯繐舏称縰艍懮积緯积緯緯燯緰縏淯緯緯姏扐舏緯舐臯舐舐舐舐舐舐舐舐舐旯积緮緯舮緯痯縐縏䷎积緯巏懱臯淰舐臭榫积縏凎痏縏嶧斌氃닒艎骏踯艮舎뙑艰艐蘐縏蘏臯穨藫蘏縐臨멐蘯蘰鈰花蘐阳繑蚦訏税蘏緯緭藬稰縐稪稏縏税般盨蘬舏緰緪踏舏舐藯縐舐舐緰藆멑舏蘰鈰舯舏訐縰舐鈰舏舏鈰狱蘐舐舐舐鈐舏舐踰繱舐뉒繑雋鹑縏舯鈐艏蘏阰舰舰踐臯蘏藰繍臮訐縐臭鈐舐舐踐艐舐蘐縑虌騐舰蘐訐舏臯舐舐縮隒舏蘐댒鎟驳븱舐訑숱舐蘐釰繐舐눑舐鷐鸰舐蘐踐舏臰蘐舐舐舐舐舐舐舐舐舐舐舐鈐舐舐舐縐舐똑縐鷭똰縎舏縏舌臬騴縐縪觯緯稍臎癇緋舏緰緩踐舏舏鸐縱舐臰縐蘫鈐縐舏藰臯臯蘐縐縎訰舏縏驰蜺訑똱舐藱踐舐舐舐舐舐訐臰釰蛓蛏蚫誊詣蘆닓荓蜓骗蹏虏늑荝麕쩒舐鈕認諊雐띑笿鸔痵滽曠髰癋骮舎纭訍驰穰虯瘍税舎榯牪臍縎緰臊鹱艏訰阏纰蘐阱繰髍踎縏舏燮緯臮踯縯縯舏縏舏鈯諨釭鈏緰藌鷰舏蘐臯縐舐阏秐醊뉲縏訯阰艏舏騐縰舰称緯舏緯扲蘐蘐舐臯駰舏舐緯繐舐鈱瘎鉦舏税蘯斮渭臎蘐縰舯淯縏緯燯燭臏燯緰緎鈰縯蘰訐繰舐踐縱鉯斮爏緯槯総緯樏縏税瘮痮蘏紏欉냋踐秐贪釰縐蘐淯綯舐訐禮鄊鸑舏蘐訐舯臯騰縰舱痯緯緯燯疰縏舐舐舐跰舏蘰巏禮舏阯禯롆뙱舏訯踐舯蘏똑縰蘯阯縏蘏鈏隭臮訏縐臭눑舐舐눰纒舐踐繑骐鈐縏舏积緯臯蘏縐舏訐縏臯訐窶蘐訐緰薏訐舐舐舐舐舐舐緰觎먰舏蘏鸐虏舏踐縐縐踐緯舏蘐穒舐舐舐臏눰踯訰踯繐舏鈐瘍緁鹑舏詐蘐舯舏鸐舰舰訐縏舏訐銯蘏訏縐臯阐舐舐踐艰舐訐縱驰縏縏舏縏舏緯縏縐縏縏縏舏积繭臏縏緰臯藯縏臰緯緯舐臯緯觮멑舐蘐눰詏舐阐舰舱蘐舏舐蘐芐舐舐舐臰踐蘐舐踐艐舐鈰縰骪麰縮蹯阰雎討鸰繰艰积縏縎槏燩腬秮緰綪뙐陏蘰鸰蜑舐뉑蚒軭鹲뚲踯藯釭覭麰軑謒뛹鉴麵쌞켿쌜승訰떕빵뚑鹱閱縗舐뙕綎룐쪵鹱阰칲鬐訐쪑誱蚵阐緯臯趰樕訒舐舐舐빓限蹰覰禳舏뙕禎둊쉲蘰蹐똰蹰蘐먱艐艑騰舐舏踐뛐臯訐縐臯똱踰蘰눰花舐阐艱뫒臯縐臯臯緯臯舏縐縏緯緯緯臐渳臰緰舐臰舐舐舐舐舐舐舐舐舐왲鈱訐옱銐舐뙐虰艓総緯緯禯榑臰称舐緍똒踰訰綯福舏눔焊鰃늴虐鉐阰虯蘏鸱艐艑訐舏舏藰舭臮訐緰臮鸰蘐蘐訐縰舏踐縏阍騐舏舏臯舏臯訐縐舐蘐舏舏鸐隯臯藰緰臯訐舐舐緯緯舐蘏緯觎먱舐蘐騰舯舏踐舰舐踐臰舐踐色舐舐舐臰騐舐舐鈰艱舐鸱舱骫蘏縏舏秏縎臯蘏縐縏积緯緯痯熭総积緰緮蘐縏舏臯縐縏舐縐舎秏稐緮懎絭緎燮积秭藱秎藯蓒䬟踕蘐臰臱訏縐舐舐舐舐蘑緰金舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐칲蘰詐먰蹰蘏숲艑蘱옰舐蘐눐쌏藯踐舐臯먰訰舐똰芲舐鈐艒늲秏积緯嗍禭緮痯緯緮秏秮緯礯䆕臰榑緰粌臯緰臰舐舐舐淐緐脨쫕鹲阐쩲닰訏쪒諒蚶疍秭秏植䣐秎懏舐紪쉷麰骲屉告縌뇖䀀鰀昈昪認旬稌藬縯癏艊懌痮縍槎晉臬樏称自詏縯蘯舯纱舐阒繑躬嶬瘎舏旯緮臮槮縏縍旰緯縏淎漬訯舐緰臭蘐縏舐积縐舐舐积鶬爯縏舏爎舎舎踰縰舐成积縏樏溳藱縐舐臯縏縏舏渏穱舐渎湐盨姌瘎縏姏税臮爏稏縎巏緯緯燯旫臍差緰膫樎稏舏瘏繐舏渏縰橊嗮稏縏燯臯臯懯縏稍差痮爎淯菑詏爎縐臭燯縏舐緯縑舐稏緯薭淯縏舏稏縏臯蘐縐舐痯緯緯緯瘱舐舐舐舐痯縐舏痯稓舐痯积蔪縏税蘯稏縎臮騲縱鉎淮秮舎燯渌臎痯緰臬鈐舐舏踐舱舐踐縑蹐懏积縏旮緎臮痯縐縎燰秮縏樎圽蘒눑縐蘲訐舐舐舐舐舐踐舐觲騲舐踏阏蘯舏阐舐舑淰积臯瘏溷蘲鈐舐舒訮稏訰燯状蘑舗庙雇嵪淭稍懎緍緭槮稏稌懮积积燯橏舏痯縐臮痯縏縏痯縰舐称縰繎嗎积緯燯緯緮旮縏縎旯緯緯懎暊緎淮緰緌燯緯縐緯緰舐燯緯綬旯縏縏痯緯臯縐縐縏痯緯縏稏瘱舐舐舐舐积縏縏称縐舐懯縐樊䆬痭秮䶮秎緍嗮稏爌嗮緯痮淯嶪維姮緰綪䧮积緯燯縐縏巯稐万䕉槯憬䖫礪疩䖬瘏巨䴌斪懪崱揿쿿닝艰몽詓蘑虐鸑芶舐陗蘱옙蘑舐蘐訐舰舐멑舰虒縐緰臰釱绶舑舐舐舐蘑舐蘰闓艻舐蘖緰쵓稏縏舏稏舏舏蘑縐舯积縏舏緯縯臯縐舐臯蘐舐舐蘐舰舐訐舑蹒舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐蘑舰藯踰虐蘐鸱舱艔瘏緯臯秏淑舐舐舐舐秐稐蘱积緐舐禹煏쐇懍瘍縏懯緮緮积縏縎槯緯緯痯旬臎燯緰緬痯縏舏瘏縐舏痯稏渊嗍积緯槯緎緮差緯瘍燯緯积淮暪臮燯緰緭积縏縏緯緰舐积緯緫舏縏舏舏舏臯舏舐縏稐縐舏縐瘰舐舐舐舐舏縏舏舏縐舐蘐縑艌䶬燭秮嗎緍緭姮稏燬姎秮燮槯喩緌差緰緊旮縏緯痯縐舏燯縐姩䦬痯淎姭綍秬䧎緯淫妯痮燮嵯掟躷舒縐蘓舑舐舐藰艑舐蘒縐闓縐縐臯縏舏臯縐縐舐舐舐舐舐舐舐舐舐舐舐舐舐臰緰舐緱緰醎懪爌舮懮縌臬槮瘯権姭秮樍巍版禫懮緰秇蘐舯舏蘰芲舐阑繴軐䕊槮懌䗋祊痊䆬痯旧再燬槭奍媽蘳痲縐薒槯縐舐舐舐舐燲疰镏憬爎妪懪疧燉稐癒湐兌懌始奍嘙舳槒舐脏壈慊浬䳊奓瘎䰧䱧䀆舮胰舘舐莰舐舐舐舂墄䓣芯舐臐舐舐舐舀띻舊쮘舐菰舐舐舐舑嵎膐舎斎臰舏舐舐舏䃩惫樇偌瘯臯舐舐舃蘖臎终鉖諑膪舐舐舎눵舰舓舐舐舐騳舐舐礯苩舱舐舰舐洭纲痉컘霏麘舐莐舐빽縐討舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐燬缯縏舐菰舐涭縏秄舏臯縍舐舰舐舏舐緬舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐緯罏緮舐舐舐舐舐舐舏舐緪舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐芰舏舐舐舐舐舐舐舐舰舅舐舐舐舐舐舐舐舐舐舐舐舐舐艏舐舐艰舐舐舐舎蹰舏舆鉒蝱舏舐舐舀壈耐舋舐臰舐舐舐興䱃䀂橮舐胐舐舐舐舀臎聁詯舐膰舐舐舐舅䃇焯舍儍膰舎舐淏舍䁩䀅姉倆熯綍舐䂫舃榏粦槦角胰蓨舐綮舄福臰舐舐舐舐涮緰舎堩稏縱舐芐舰䁊崏擨键脯觭舐臐臰痲綐楁䒦脐舍舐舐舐舐舐舏䀀䀋穊舐艐舐舐舐舉疎瑨艎舐苰舐舐舐舊憮緯舏痰舐舏舐緰舏䃫摍穎灯蜲臰䁦䄋岧痓綌縅阗蘲藋緭緮秀臰舐舐舐舐臰緰縐舐禯緯縏舐舰舏嶯燏秄闰芏舴舐舰蘏稒緯秠舐舐舐舐舐舐舐舐舐榍礏舲舐舰舐舐舐舊舐臯訔舐舐舐舐舐舏槯緯舏舐臰舐舐积舏夊硎緫緯荰緰舐崎舄緮緭緫舐舰舌舐緯興舐舐舐舐舐舐痯緰舏絏縯縐舐艰臰敮禯緂臯臎臭舐舏舏緯綩秠뛹芐舟舐苰舐舐舐舐舱瘌菝舐荐舐舐舐舒쎝阬쾿舐菰舐舐舐舙蘓臰舐鈲舰舐舐舐舏樶癐縖覰韕至舐緰舑뛞臎蘏캽髸눗舐緮舋켙艐踖舐艐鈑빗舰舒阓霰茺舐荰舲疱竸緸컜뛑콟舐莐캚뼿艓踒舐舐舐舐舐舐舐舐舐臰畯舐舐舐舐舐舐舏陓綮蘗舐芰舐舐舐舎舐舐舐訐舐舐舐舐舐縐繐縱舐蟰苒緯縏縏舕臯舎騴莱蘒緯緰緬阐舐舐舐舐蘐緯臰舐舰芐艐舐苰舐緯繯緮뚷芐蘽舐荰눷舐臰緤쬺艐舗舐舐舐舐舐舏訳舭諼舐芰舐舐舐興쿿蚭캟舐苐舐舐舐舍緰緯舏臰臰舏舐緰舏槰絮縋薯蟰舐舐稏舎蘒舏舐눒蝱踑舐縏舎鸲舐舐舐舐臰觰縏舏覑荏艳艐蟱舰椏窑禮캘蘭驝켼댚캗踜緰禦藰腐舗舐艰舐舐舐舍墄唍艐舐臐舐舐舐舆鼺臌뙗舐茐舐舐舐舎榮臰舐燰臰舏臰臰舏夎疮緪慎緰臯膐艰臉舴芏縌蘑膰緍臰臰臎藱舐舐舐舐舐藯臰舏熯縯舐舐舐舐疯纑縐눗艏蘔舐艐舐訶缏縐嵈脰舐왲艰舑舐舐舎䀅息舍綯艰舐舐舐舌銖膮訒鹸芐臰舐舐舏燯臰舏緰舐舐臰舐舏斎縏緭疯茐緮秏缐緫緰臯縎蘰莰緦舐舐緯蘏臰舐舐舐舐臰臰舏縏舏舐臰艐舐緰艏緯觰舏舐訲英臢蘐縐臮舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐臰舐舐舐舐舐舐舐舐舐臯舐舐舐舐舐舐舐舐舐舐舐舐臰舏舐舐緯舐舐臰舏舐舯舎舐舰緮舐舐臫傅耐舉舐膰舐舐舐與䢤䁣爍舐腰舐舐舐舆蘰糁虏舐膰舐舐舐舆崈綏舏䥉膰舏膐痏舍䲅嶐懯䂥䰄糦聰䰀聀藭膋縌瘱耇璀膐絋脀斫舐臯舐臰舏斮緰舏䐅痏榯舐舐舐䢅瘰渑脲蔎焭舐脐訐疮絯憣崈聰舍科艰舐舐舐舏䁢䀄扬奯衏藋舐舐舃臰泥蘰몹腲阳舐舐舌嶫똑舏藯켔闱艰茑舝䆎䣫䨍琈럿뼟吀抛戶訲袈渥쬜켾치縏舙腯鸳舏訑蘑艐跰隒멐臹臏缏蘕鈑蚓趓戶礰界뙓銏몚뺟鷴쵰黿賰鄧陓舐舑舐舐舐舐舐舏踒詯處舐臐舐舐舐舅쫞艐鹚舐舐舐舐舐舍臰臰舐緰臰舐臐积舎秱訐縐烬缛縐聐嘶腰艱藱舐縐髗臯臰膲膋蘐舐舐舐舐舐稏緰舏薰舏舑蘐膐総帏祐禋뗴訮踗蘴肭薦绸籨甁뼻芐舚舐艰舐舐舐舐稰燭苗舐芰舐舐舐舏쌻詭캽舐莐舐舐舐舐舰臰舐訐舰舏臰舐舏燱稲繵稰茐舐膐縏臰骺舏舐霚蓰舉臰緯臮騑臰踑舐舰訐踱舐舐攮繐緯舐芐舱綯苲绾髺镮酱舐菐띿똺艳艗臏膰舒켙芐舓舐舐舏䣈䳫繐疰鵰舏舐舐舐虲瓪陓쾙鞚骼舐舐舔窏緰舏馯螰蘐臰舐舏喐炎緭封蜹蛛畎縐綱稐綎舊鳮옴붳緯緰臌뉕舐舲쉖苰븴茐舏舑攊銎稲礏藲肮煯糰瑤饰量藒쏟봏끩詹綯簀쉒舐舐舐臰舐舐舐舏蹒訰艔舐舰舐舐舐舏욼艐鈻舐芰舐舐舐舐騐舐舐痎臰臰臐緰舏縏舰縑岍穐臯脐祯膍舐舐舐舏膯臯臰総臬鈑舐舐舐臰臯舏緰臯紭蚏縑縐腰膯榯累紆륯藏訔鍿葩逤艛簄瑠稐脐舕舐艐舐舐舐舌悦复艱舐舰舐舐舐與띻臭멗舐茰舐舐舐舑秐臰舏稐舐舐舐舐舏崏祯縍甮臯與舐舐舍踒臯舎訒臯臋舐舐舏防臰舐舐舐舐跰舐舐絮良舋舐舱舐秏艑緲똷芰訲舓苑舌鸵縐臰舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐緯縯縎舏芐舏緯舰緮舐舐縏舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舏臯舏舐舐舐舏舐舏舏舐舏舐舐舐舏臰縐답舐舖舐舰舐䦬臐舌洫疯舲舐舐舐惬緰臫콟艏鸜舐艰舐舒臰緬稏臰舐緰舐舐緯臰舏痰緯縏积縰舏疮羰緈舏臯縏臰舐縍緰臰緭踐舐舐舐舐舐臰臰舏臰舯舐臯舐舏秮茰緢騳艐舏蘑芐臧訒舰緧傆肰舋舐臰舐舐舐舌䲆䁊癌舐臰舐舐舐舃蘎脉蹐舐舐舐舐舐舊族燏舐燎臯舏舐痯舎撨淔樴墮納綌舐堄舁騶舐臭舒耨綨舐緎舋緮臯舐舐舐舏痯縏舎撪緯縏舐舰舐梧经秸跐腌薮舓臰舏藮緯緧䶭臰舏舐舐舐舐舐舐䡪沎緭舐臰舐舐舐舊熭絭瘎舐舐舐舐舐舎淏緯舏縏舐舐舐縐舐嘔畯稑粍诼荿氄潾竜艖臏程阒茷舖臯縒練旯臯緯舑舐臰許緰舐緯緯緯舐艰舑縏縐縒舏臏緮舗艓蘔뉛縐藭縑膰舒舐舐舐䃇膐舋禬榍誸舐腰舐䃃摪梣웹舍슘舐臰舐觲縏懴嵍綮舏緧臏縏䴭兮興旴禱渑瓌菿舒䰁廜列骷薮渫踔譼臸蘗縺禰蘋舏舐舐舐舏昒积秢藯纯舳舐繱臰戸冒䥮맳艐踻訵臒臯돟碉磆뽛苐舟舐茐舐舐舐舒税稍菙舐茰舐舐舐舒읺蹏쾜舐茰舐舐舐舔骒縐舏騲舐舐舐縐舐綶蹖稷訲龒舔舐痯舗쭟阒訑읛量觮舐緯舏닷舏舓舓艐訑웕縏舒穐良纓舓菷芕觎读缟썛鸐뇳舜菽쏿콚茸썿榍臐舏舐舐舐舐舐舐䐩悭縍舐艐舐舐舐舏熯祍瘌舐荐舐舐舐舑积緰舏蘏舐舐舐舐舐奰焏瘮胨诗苼祮笲繚秲総縏눏蚓藵积舑緳緰臰緰舑舰蘐臰舐舐緌緯秐舐芓網臯縐攉藐臯痯舝致뤮蹸臯肇닷艐舜舐舐舐藑臰舌緰税鍘舐艰舐哊榎綴쾼鹬콿舐莐舐똔窑瘝憎痏舏榫胐嗭秏燰舍妍咫渋怈漖燸個䇴慰縑祏與鴮詵藶淏熓禋늒舏姏舌聐緇稐槐䅧疮鍎盻舏縔糏䑧䃭䀦츳왏욘믿鴮鲋諿倇堀舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐芩挠蹂牋威詁舐舏舐帄䘢蘄権威虠舐舐舐舐舐舐舐舐舐舐舐舐雎篬럏덯筯쮮縐舏縐躍矍럏绊玭鿦舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舍税縍牧湥鉩芪帇鉨阯蘏訏槅嗧蹊芉姦蹇舐舐舐舐舐舐舐舐舐巫旭渌槇帩蹬艭巨鉋踏縏蘏润娈蹫繪姆蹈舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐爏稏舏芬狭뜱録犌뛯느鉯驐艌溍닰霑牬닎舐舐舐舐舐舐舐舐舐樎瘏稏苋猍뜰靑犭묐繏艏蘯纪滬댏輌滌鍌舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舏舐舏税滊綫稏秫編舐舐舐旮淋緪瘏秩臣舐舐舐舐舐舐舐舐舐舐舐舐蘏罰蛯鉐纏隐舐舐縐縏绯蚯舯纏黉舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐懫渌戊済湧臫爊啧臉稏縏縏嵇喉縋爊奇膩舐舐舐舐舐舐舐舐舐䗭淭槬商喩稭淋啨臊瘏縏舏夥奨秬淉商綈舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐姯秮秮嶧嘩艍爭應蘬稐縏舏嶪嗊般爍榈臫舐舐舐舐舐舐舐舐舐姮积秮妪姪艍爍榪蘌爏縏舏妩喩縋渪文編舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舏縎拉舋舏稊興舐舐舐淭槫舋稏稈臤舐舐舐舐舐舐舐舐舐舐舐舐訏羐蛐騰芰銑縐縏縐蘏苰蚐蘯芒銩舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐踏縏舏銮苰鬓뛒芏뫒똰蘰蘐蹏穯隲뚲艍뚰舐舐舐舐舐舐舐舐舐藯縏舏蹏纐雳늲艮몱또蘰蘰蹎穮黑댒繍뫎舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐訏縏舏鋑苳묵띖虰뛴쩐陰鉐銑花뫴묵虎뫒舐舐舐舐舐舐舐舐舐蘏舏舏躯苒뜕댕芏뫓麐麯鉯躯绑묔鋯纐錌舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐纯舏舏縏舏舐舐舐緯縏縏舐縏舏舐舐舐舐舐舐舐舐舐舐舐舐蘏茐蚐鈐艐訰舐舐舐舏芰艐訐艰鉰舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐阏舏舏蹏芪陮限痫驍騏舐舐秬樌詎驐痨阋舐舐舐舐舐舐舐舐舐臯縏縏秭樬詏訰痋鈭鈐舏舏痬旫設陏疨阋舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐訐舏舏限苲鬓뛓蚐뫓븐訯蘐踰窐雒뫓艎늱舐舐舐舐舐舐舐舐舐蘐舏舐鉐英霒닒芐뛑騏蘐蘐蹏竐닲닐蚮黯舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐苏舏舐縏舏舐舐舐縏縐舐舐縏舐舐舐舐舐舐舐舐舐舐舐舐舐舏茰蚰踰芐蹑舐舐舐舐苐虰訐艱隑舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐뚯髎骎躰蹱黓黴蘮麱켐뼯쌏蘮瘯銑담縌驰舐舐舐舐舐舐舐舐舐蘏稏縎縎爯躑銒秬限쪰黏麰臬淭蹏黒疪騎舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舏縏舏臭港銑銒秭蹐빐銏陯緍淬踰隑疪鈎舐舐舐舐舐舐舐舐舐舏縏舏緭樍詐蹐熪討왰鉰鉰禬榫討骱煈醬舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐芏舏舐縏舐舐舐舐舐縏舐舐縏舐舐舐舐舐舐舐舐舐舐舐舐舐舐茐芐訐艰詐舐舐舐舐芰虰蘐艱蹱舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐訏瘎舎蹱结덗뜗誑뛵쪐麰骐蹑蚒黵뜗詐늳舐舐舐舐舐舐舐舐舐舏縏舏詏芒雵黔蘰麳쩐陰鉰踯繐骲담舎뉱舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐訏縏舏蹏窲髴黔虏麲옰鉐鉏訯穐隳닓舍驰舐舐舐舐舐舐舐舐舐踏縏縏討癰隲骳縍驰칰骐陰訍爍驰뫵綬눎舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縐舐痯淬緬縏緭緪舐舐舐淯痮緭稏秫緧舐舐舐舐舐舐舐舐舐舐舐舐緯縏舏舐舏舏舐舐舐縏縏舏緯縏舊舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐昏稏稏巩戈稪爍嶨藩积緯縏嶩姉緫渍榧緈舐舐舐舐舐舐舐舐舐凯积瘎喉巊縭爎榩藫痯縏縏妉喉秫槭文綨舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐淯縏縏樍檏諲詰癎骐縐舏舏瘎湎誑虐瘍陮舐舐舐舐舐舐舐舐舐昏縏縏昍檏諰虰瘭陯樏縏縏槭晍誐爍樬纪舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舏积燌緌緯秬緪舐舐舐痯痭緬緯緫緧舐舐舐舐舐舐舐舐舐縐舐舐縏緯舏緯緯舏縐舐縐緯緯舏縏縏縋舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐䇬槬旫啈帯色癏旬蹏爏舏舏斊旬艏瘯榪訌舐舐舐舐舐舐舐舐舐䧮渍淭嶉旬繏瘎榊蘍瘏縏舏慩憪稍爍敨薪舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐䗭淬槬嵨巌縯爎斪臭縏縏舏慩憊税瘍楈綫舐舐舐舐舐舐舐舐舐䗫旫懪备嶊瘍燍慈禫瘏縯訯备奈痋燌崅膉舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐縏縏痯構緌緯秬緩舐舐舐燮燍緫縏秪緦舐舐舐舐舐舐舐舐舐舐舐舐縏緯舏舏緯臯舐舐舐緯縏舏縏縏縉舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐䧬淬淬旊湲軵虲瘯隒縏縏舏燭瘯躲艐瘍陏舐舐舐舐舐舐舐舐舐凭樌渋構港課艑爎鉰縏縏舏涫燭虐繐淋鈎舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐舐䗪懪戉憩是課繰爍鉐稏舯蘏涫樍虰舯燋踎舐舐舐舐舐舐舐舐舐䇧万分嵨昌良種淋討娊昫昩慨懊種燪憉燌";

        public const int DEPTH_1 = 7;
        public const int DEPTH_2 = 8;
        public const int ENDGAME = 50;

        public readonly static ulong[][] MASKS = new[] {
                new ulong[] { 0b11111111, 0b11000000_11100000_11100000, 0b00111100_00111100_00000000_00000000 },
                new ulong[] { 0b11111111, 0b11000000_11100000_11100000, 0b00111100_00111100_00000000_00000000 },
                new ulong[] { 0b11111111, 0b11000000_11100000_11100000, 0x8040201008040201UL },
                new ulong[] { 0b11111111, 0b11000000_11100000_11100000, 0x8040201008040201UL }
            };

        static void Test(string[] args)
        {
            WeightLight.Init();
            BookLight.InitBook();

            int id = int.Parse(Console.ReadLine()); // id of your player.
            int boardSize = int.Parse(Console.ReadLine());
            
            var timer = new Stopwatch();

            // game loop
            while (true)
            {
                ulong b = 0;
                ulong w = 0;

                for (int i = 0; i < boardSize; i++)
                {
                    string line = Console.ReadLine(); // rows from top to bottom (viewer perspective).

                    for (int j = 0; j < boardSize; j++)
                    {
                        int pos = j * 8 + i;

                        switch (line[j])
                        {
                            case '0':
                                b |= 1UL << pos;
                                break;

                            case '1':
                                w |= 1UL << pos;
                                break;
                        }
                    }
                }
                int actionCount = int.Parse(Console.ReadLine()); // number of legal actions for this turn.
                for (int i = 0; i < actionCount; i++)
                {
                    string action = Console.ReadLine(); // the action
                }

                timer.Restart();

                B board = new B(b, w);

                (int x, int y, _) = PlayerLight.DecideMove(board, id == 0 ? 1 : -1); 

                timer.Stop();
                Console.Error.WriteLine("Taken Time : " + timer.ElapsedMilliseconds);
                Console.Error.WriteLine("Eval Time : " + WeightLight.t.Average());

                string row_labels = "abcdefgh";
                Console.WriteLine($"{row_labels[x]}{y + 1}");
            }
        }
    }

    public class BookLight
    {
        const int POSITION_SIZE = 10;

        public static readonly Dictionary<int, byte> Positions = new Dictionary<int, byte>();

        public static bool use_book = true;

        public static void InitBook()
        {
            int n = Data.BOOK_DATA.Length / POSITION_SIZE;

            for (int i = 0; i < n; i++)
            {
                string s = Data.BOOK_DATA[(POSITION_SIZE * i)..(POSITION_SIZE * (i + 1))];

                int hash = int.Parse(s[..8], System.Globalization.NumberStyles.HexNumber);
                byte move = byte.Parse(s[8..10], System.Globalization.NumberStyles.HexNumber);

                Positions[hash] = move;
            }
        }

        public static ulong SearchBook(B board)
        {
            if (!use_book)
                return 0;

            var rotated = board;

            for (int i = 0; i < 2; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    int hash = rotated.GetHashCode();

                    if (Positions.ContainsKey(hash))
                    {
                        ulong move = 1UL << Positions[hash];

                        for (int k = 0; k < 4 - j; k++)
                            move = B.Rotate90(move);

                        if (i == 1)
                            move = B.HorizontalMirror(move);

                        return move;
                    }
                    rotated = rotated.Rotated90();
                }
                rotated = board.HorizontalMirrored();
            }
            return 0;
        }
    }

    public static class WeightLight
    {
        readonly static WeightTuple[] tuples = Data.MASKS.Select(m => new WeightTuple(m)).ToArray();
        static WeightTuple current;

        static Stopwatch timer = new Stopwatch();

        public static byte[] Decode(string encoded)
        {
            byte[] data = Encoding.UTF8.GetBytes(encoded);

            byte[] decoded = new byte[data.Length];

            for (int i = 0; i < data.Length / 3; i++)
            {
                ushort us = Decode(data, i * 3);

                decoded[i * 3] = (byte)((us & 0b11111_00000_00000) >> 10);
                decoded[i * 3 + 1] = (byte)((us & 0b11111_00000) >> 5);
                decoded[i * 3 + 2] = (byte)(us & 0b11111);
            }
            return decoded;
        }

        public static ushort Decode(byte[] src, int offset)
        {
            byte b1 = src[offset];
            byte b2 = src[offset + 1];
            byte b3 = src[offset + 2];

            ushort i = (ushort)(((b1 & 0xF) << 12) | ((b2 & 0b111111) << 6) | (b3 & 0b111111));

            if (i >= 0xB000)
                i -= 0x1000;

            i -= 0x4000;

            return i;
        }

        public static void Init()
        {
            byte[] data = Decode(Data.WEIGHT_DATA);

            int n = (int)Math.Pow(3, WeightTuple.HASH_LENGTH) * WeightTuple.NUM_TUPLES;

            for (int i = 0; i < tuples.Length; i++)
            {
                tuples[i].Read(data, n * i);
            }
        }

        public static void SetStage(int n_discs, int depth)
        {
            int stage = Math.Clamp((n_discs + depth + 5) / 10 - 2, 0, 3); ;
            current = tuples[stage];
        }

        public static List<float> t = new List<float>();

        public static int Eval(B b)
        {
            timer.Restart();

            int e =
                current.E(new RB(b))
                // + Board.BitCount(b.bitB & 9295429630892703873UL) * 400 - Board.BitCount(b.bitW & 9295429630892703873UL) * 400
                // + (int)MathNet.Numerics.Distributions.Normal.Sample(random, 0, 12)
                ;

            t.Add((float) timer.ElapsedTicks / Stopwatch.Frequency * 1000000000F);

            return e;
        }
    }

    public class WeightTuple
    {
        public const float WEIGHT_RANGE = 10;

        public const int NUM_TUPLES = 3;

        public const int HASH_LENGTH = 8;
        public const int N_PER_TUPLE = 1 << (HASH_LENGTH * 2);
        // public const int N_PER_TUPLE = 729;

        public const int ARRAY_LENGTH = N_PER_TUPLE * NUM_TUPLES;

        readonly ulong[] masks;
        readonly byte[] weights_b;

        public WeightTuple(ulong[] masks)
        {
            this.masks = masks;
            weights_b = new byte[ARRAY_LENGTH];
        }

        public static int Hash(B b, ulong mask)
        {
            int hash1 = (int)Bmi2.X64.ParallelBitExtract(b.bitB, mask);
            int hash2 = (int)Bmi2.X64.ParallelBitExtract(b.bitW, mask);
            return hash1 | hash2 << HASH_LENGTH;
        }

        int E(B b)
        {
            int e = -31 * masks.Length / 2;
            for (int i = 0; i < masks.Length; i++)
            {
                e += weights_b[Hash(b, masks[i]) + N_PER_TUPLE * i];
            }
            return e;
        }

        public int E(RB b)
        {
            return E(b.rot0) + E(b.rot90) + E(b.rot180) + E(b.rot270)
                + E(b.inv_rot0) + E(b.inv_rot90) + E(b.inv_rot180) + E(b.inv_rot270);
        }

        static uint ConvertStateToHash(int state)
        {
            uint b1 = 0;
            uint b2 = 0;
            for (int i = 0; i < HASH_LENGTH; i++)
            {
                switch (state % 3)
                {
                    case 1:
                        b1 |= 1U << i;
                        break;

                    case 2:
                        b2 |= 1U << i;
                        break;
                }
                state /= 3;
            }
            return b1 | (b2 << HASH_LENGTH);
        }

        public void Read(byte[] data, int offset)
        {
            int n = (int)Math.Pow(3, HASH_LENGTH);

            for (int i = 0; i < masks.Length; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    byte e = data[j + n * i + offset];

                    uint index = ConvertStateToHash(j);
                    weights_b[index + N_PER_TUPLE * i] = e;
                }
            }
        }
    }

    public struct SP
    {
        public int depth;
        public float alpha, beta;

        public SP(int depth, float alpha, float beta)
        {
            this.depth = depth;
            this.alpha = alpha;
            this.beta = beta;
        }

        public static SP CreateInitParam(int depth)
        {
            return new SP(depth, -PlayerLight.INF, PlayerLight.INF);
        }

        public SP Deepen()
        {
            return new SP(depth - 1, -beta, -alpha);
        }

        public SP SwapAlphaBeta()
        {
            return new SP(depth, -beta, -alpha);
        }

        public SP CreateNullWindowParam()
        {
            return new SP(depth - 1, -alpha - 1, -alpha);
        }
    }

    public class PlayerLight
    {
        public const int INF = 10000000;

        public static Dictionary<B, (float, float)> table_prev;
        public static Dictionary<B, (float, float)> table = new Dictionary<B, (float, float)>();

        static MoveComparer comparer = new MoveComparer();

        public static bool use_transposition_cut = true;

        public static bool use_probcut = false;
        public static float sd = 1.1F;

        protected static float EvalFinishedGame(B board)
        {
            node_count++;

            return board.GetStoneCountGap() * 10000;
        }

        public static int node_count;

        public static float Eval(B board)
        {
            node_count++;

            if ((board.n_stone & 1) != 0)
            {
                return -WeightLight.Eval(board.ColorFliped());
            }
            else
            {
                return WeightLight.Eval(board);
            }
        }

        public static (int x, int y, ulong move) DecideMove(B board, int color)
        {
            if (color == -1)
                board = board.ColorFliped();

            ulong move = BookLight.SearchBook(board);

            if (move != 0)
            {
                Console.Error.WriteLine("Found Position");
                (int xx, int yy) = B.ToPos(move);
                return (xx, yy, move);
            }

            node_count = 0;

            ulong result;

            //if (board.n_stone == 18)
            //{
            //    (result, _) = SolveIterativeDeepening(board, SearchParameter.CreateInitParam(Data.DEPTH - 1), 2, 3);
            //}
            //else
            if (board.n_stone <= 40)
            {
                (result, _) = SolveIterativeDeepening(board, SP.CreateInitParam(Data.DEPTH_1), 2, 3);
            }
            else
            if (board.n_stone < Data.ENDGAME)
            {
                (result, _) = SolveIterativeDeepening(board, SP.CreateInitParam(Data.DEPTH_2), 2, 3);
            }
            else
            {
                use_probcut = false;
                (result, _) = SolveRoot(board, SP.CreateInitParam(64));
            }

            table = new Dictionary<B, (float, float)>();
            table_prev = null;

            (int x, int y) = B.ToPos(result);

            return (x, y, result);
        }

        public static (ulong, float) SolveIterativeDeepening(B board, SP p, int interval, int times)
        {
            WeightLight.SetStage(board.n_stone, p.depth);

            float depth = p.depth;
            p.depth -= interval * Math.Min(times - 1, (int)Math.Ceiling((double)p.depth / interval) - 1);

            while (true)
            {
                (ulong move, float e) = SolveRoot(board, p);

                if (p.depth >= depth)
                    return (move, e);

                table_prev = table;
                table = new Dictionary<B, (float, float)>();
                p.depth += interval;
            }
        }

        public static (ulong, float) SolveRoot(B board, SP p)
        {
            Move root = new Move(board);

            if (root.n_moves <= 1)
            {
                return (root.moves, 0);
            }

            Move[] array = root.NextMoves();
            if (p.depth >= 4 && table_prev != null)
                Array.Sort(array, comparer);
            else
                Array.Sort(array);

            Move result = array[0];
            float max = -Solve(array[0], p.Deepen());

            for (int i = 1; i < array.Length; i++)
            {
                Move move = array[i];
                float eval = -Solve(move, p.CreateNullWindowParam());

                if (p.alpha < eval)
                {
                    p.alpha = eval;
                    eval = -Solve(move, p.Deepen());
                    p.alpha = Math.Max(p.alpha, eval);
                }

                if (max < eval)
                {
                    max = eval;
                    result = move;
                }
            }
            return (result.move, max);
        }

        public static readonly double[] avg = {
            -0.040797614,
0.66978055    ,
0.37934193    ,
0.86878          ,
0.5464785      ,
2.8221052      ,
0.29154423    ,
3.66192          ,
0.7397154      ,
4.0271688      ,
0.9654541      ,
4.3736925      ,
1.2865216      ,
4.479592        ,
1.555555        ,
4.2833447      ,
2.0407941      ,
4.520586        ,
1.9052997      ,
4.4924097      ,
0.95056          ,
5.4000936      ,
0.4569389      ,
4.5676417      ,
3.7433705      ,
4.3786507      ,
4.383622        ,
4.59787          ,
4.6662345      ,
4.741156        ,
3.7971044      ,
3.5280662      ,
4.9263673      ,
4.03094          ,
5.949238        ,
5.3838835      ,
5.390336        ,
5.227772        ,
5.5430946      ,
4.0768523      ,
4.712555        ,
5.01673          ,
7.732921        ,
3.4486496      ,
6.312923        ,
0.04794008    ,
6.525366        ,
-0.054144207,
4.536696        ,
0.51772803    ,
4.403394        ,
0.029048447  ,
3.1076183      ,
-0.37305945  ,
1.2830694      ,
-0.34651178  ,
-0.032439914,
};

        public static readonly double[] var =
        {
            0.903211564,
1.148147494,
2.468252397,
1.179641874,
3.312044076,
2.851501297,
3.279486627,
3.767106141,
3.596443825,
3.951706221,
3.700687556,
3.989085087,
3.952979406,
4.203443551,
3.614856076,
4.481601828,
3.84079151  ,
4.210410232,
3.853231753,
4.206731787,
4.391371043,
5.946572851,
4.552847908,
5.341285182,
5.60257932  ,
5.591765323,
6.239090821,
5.827181088,
6.805832706,
5.816464948,
7.34040763  ,
6.86643365  ,
7.556012358,
7.61525341  ,
7.776866981,
7.855476763,
8.247550832,
8.10072103  ,
7.754332039,
7.62969351  ,
7.581629998,
7.920663353,
11.63516414,
10.68029828,
10.74463431,
9.755358666,
9.619264157,
9.04140274  ,
9.088559482,
8.046162931,
8.180113278,
7.665379154,
7.034635958,
5.962356099,
6.615256864,
5.800548449,
4.944035321,

        };

        public static float NullWindowSearch(Move move, SP p)
        {
            return -Solve(move, p.CreateNullWindowParam());
        }

        public static float Negascout(B board, ulong moves, SP p)
        {
            ulong move = B.NextMove(moves);
            moves = B.RemoveMove(moves, move);
            float max = -Solve(new Move(board, move), p.Deepen());

            if (p.beta <= max)
                return max;

            p.alpha = Math.Max(p.alpha, max);

            while ((move = B.NextMove(moves)) != 0)
            {
                moves = B.RemoveMove(moves, move);
                Move m = new Move(board, move);

                float eval = NullWindowSearch(m, p);

                if(use_probcut && p.depth == 7)
                {
                    double a = avg[board.n_stone - 4] / 4 * 46;
                    double v = avg[board.n_stone - 4] / 4 * 46;

                    use_transposition_cut = false;
                    float eval_2 = -Solve(m, new SP(2, p.beta, p.beta));
                    use_transposition_cut = true;

                    if (p.beta <= eval_2 + a - v * sd)
                    {
                        Console.WriteLine(p.beta <= eval);
                        return p.beta + 1;
                    }

                    use_transposition_cut = false;
                    eval_2 = -Solve(m, new SP(2, p.alpha, p.alpha));
                    use_transposition_cut = true;

                    if (p.alpha >= eval_2 + a + v * sd)
                    {
                        // Console.WriteLine(p.alpha >= eval);
                        continue;
                    }
                }

                if (p.beta <= eval)
                    return eval;

                if (p.alpha < eval)
                {
                    p.alpha = eval;
                    eval = -Solve(m, p.Deepen());

                    if (p.beta <= eval)
                        return eval;

                    p.alpha = Math.Max(p.alpha, eval);
                }
                max = Math.Max(max, eval);
            }
            return max;
        }

        public static float Negascout(Move[] moves, SP p)
        {
            float max = -Solve(moves[0], p.Deepen());

            if (p.beta <= max)
                return max;

            p.alpha = Math.Max(p.alpha, max);

            foreach (Move move in moves.AsSpan(1, moves.Length - 1))
            {
                float eval = NullWindowSearch(move, p);

                if (use_probcut && p.depth == 7)
                {
                    double a = avg[move.reversed.n_stone - 5] / 4 * 46;
                    double v = avg[move.reversed.n_stone - 5] / 4 * 46;

                    use_transposition_cut = false;
                    float eval_2 = -Solve(move, new SP(2, p.beta, p.beta));
                    use_transposition_cut = true;

                    if (p.beta <= eval_2 + a - v * sd)
                    {
                        // Console.WriteLine(p.beta <= eval);
                        return p.beta + 1;
                    }

                    use_transposition_cut = false;
                    eval_2 = -Solve(move, new SP(2, p.alpha, p.alpha));
                    use_transposition_cut = true;

                    if (p.alpha >= eval_2 + a + v * sd)
                    {
                        // Console.WriteLine(p.alpha >= eval);
                        continue;
                    }
                }

                if (p.beta <= eval)
                    return eval;

                if (p.alpha < eval)
                {
                    p.alpha = eval;
                    eval = -Solve(move, p.Deepen());

                    if (p.beta <= eval)
                        return eval;

                    p.alpha = Math.Max(p.alpha, eval);
                }
                max = Math.Max(max, eval);
            }
            return max;
        }

        public static float Negamax(Move[] moves, SP p)
        {
            float max = -1000000;

            for (int i = 0; i < moves.Length; i++)
            {
                float e = -Solve(moves[i], p.Deepen());
                max = Math.Max(max, e);
                p.alpha = Math.Max(p.alpha, e);

                if (p.alpha >= p.beta)
                    return max;
            }
            return max;
        }

        public static float Negamax(B board, ulong moves, SP p)
        {
            float max = -1000000;
            ulong move;
            while ((move = B.NextMove(moves)) != 0)
            {
                moves = B.RemoveMove(moves, move);

                float e = -Solve(new Move(board, move), p.Deepen());
                max = Math.Max(max, e);
                p.alpha = Math.Max(p.alpha, e);

                if (p.alpha >= p.beta)
                    return max;
            }
            return max;
        }

        public const int ordering_depth = 57;
        public const int transposition = 1;

        public static float Solve(Move move, SP p)
        {
            if (p.depth <= 0)
                return Eval(move.reversed);

            if (move.moves == 0)
            {
                ulong opponentMoves = move.reversed.GetOpponentMoves();
                if (opponentMoves == 0)
                {
                    return EvalFinishedGame(move.reversed);
                }
                else
                {
                    Move next = new Move(move.reversed.ColorFliped(), 0, opponentMoves, B.BitCount(opponentMoves));
                    return -Solve(next, p.SwapAlphaBeta());
                }
            }

            if (move.reversed.n_stone == 63 && move.n_moves == 1)
                return -EvalFinishedGame(move.reversed.Reversed(move.moves));

            float lower = -1000000;
            float upper = 1000000;

            if (p.depth > transposition && move.reversed.n_stone <= ordering_depth && use_transposition_cut && table.ContainsKey(move.reversed))
            {
                (lower, upper) = table[move.reversed];

                if (lower >= p.beta)
                {
                    return lower;
                }

                if (upper <= p.alpha || upper == lower)
                {
                    return upper;
                }

                p.alpha = Math.Max(p.alpha, lower);
                p.beta = Math.Min(p.beta, upper);
            }

            float value;

            if (p.depth >= 3 && move.reversed.n_stone < 60)
            {
                if (move.n_moves > 3)
                {
                    var moves = move.NextMoves();

                    if (p.depth >= 4 && table_prev != null)
                        Array.Sort(moves, comparer);
                    else
                        Array.Sort(moves);

                    value = Negascout(moves, p);
                }
                else
                    value = Negascout(move.reversed, move.moves, p);
            }
            else
            {
                value = Negamax(move.reversed, move.moves, p);
            }

            if (p.depth > transposition && move.reversed.n_stone <= ordering_depth && use_transposition_cut)
            {
                if (value <= p.alpha)
                    table[move.reversed] = (lower, value);
                else if (value >= p.beta)
                    table[move.reversed] = (value, upper);
                else
                    table[move.reversed] = (value, value);
            }

            return value;
        }

        class MoveComparer : IComparer<Move>
        {
            const int INTERVAL = 200;

            public static float Eval(Move move)
            {
                if (table_prev.TryGetValue(move.reversed, out (float min, float max) t))
                {
                    if (-PlayerLight.INF < t.min && t.max < PlayerLight.INF)
                        return (t.min + t.max) / 2;
                    else if (-PlayerLight.INF < t.min)
                        return t.min / 2 + INTERVAL;
                    else if (PlayerLight.INF > t.max)
                        return t.max / 2 - INTERVAL;
                }
                return PlayerLight.INF + move.n_moves;
            }

            public int Compare([AllowNull] Move x, [AllowNull] Move y)
            {
                return Comparer<float>.Default.Compare(Eval(x), Eval(y));
            }
        }
    }

    public readonly struct Move : IComparable<Move>
    {
        public readonly ulong move;
        public readonly B reversed;
        public readonly ulong moves;
        public readonly int n_moves;

        public Move(B board, ulong move)
        {
            this.move = move;
            reversed = board.Reversed(move);
            moves = reversed.GetMoves();
            n_moves = B.BitCount(moves);
        }

        public Move(B reversed)
        {
            move = 0;
            this.reversed = reversed;
            moves = reversed.GetMoves();
            n_moves = B.BitCount(moves);
        }

        public Move(B reversed, ulong move, ulong moves, int count)
        {
            this.move = move;
            this.reversed = reversed;
            this.moves = moves;
            this.n_moves = count;
        }

        public Move[] NextMoves()
        {
            ulong moves_tmp = moves;

            Move[] array = new Move[n_moves];
            for (int i = 0; i < array.Length; i++)
            {
                ulong move = B.NextMove(moves_tmp);
                moves_tmp = B.RemoveMove(moves_tmp, move);
                array[i] = new Move(reversed, move);
            }
            return array;
        }

        public Move[] OrderedNextMoves()
        {
            Move[] moves = NextMoves();
            Array.Sort(moves);
            return moves;
        }

        public int CompareTo([AllowNull] Move other)
        {
            return n_moves - other.n_moves;
        }
    }

    public class RB
    {
        public readonly B rot0, rot90, rot180, rot270, inv_rot0, inv_rot90, inv_rot180, inv_rot270;

        public RB(B board)
        {
            rot0 = board;
            inv_rot0 = board.HorizontalMirrored();
            inv_rot90 = board.Transposed();
            inv_rot180 = board.VerticalMirrored();
            rot90 = inv_rot0.Transposed();
            rot180 = inv_rot180.HorizontalMirrored();
            rot270 = inv_rot90.HorizontalMirrored();
            inv_rot270 = rot270.VerticalMirrored();
        }
    }

    public readonly struct B
    {
        public const long InitB = 0x0000000810000000L;
        public const long InitW = 0x0000001008000000L;

        public static readonly B Init = new B(InitB, InitW);

        public readonly ulong bitB;
        public readonly ulong bitW;

        public readonly int n_stone;

        public B(B source)
        {
            bitB = source.bitB;
            bitW = source.bitW;
            n_stone = source.n_stone;
        }

        public B(ulong b, ulong w) : this(b, w, BitCount(b | w))
        {
        }

        public B(ulong b, ulong w, int count)
        {
            bitB = b;
            bitW = w;
            n_stone = count;
        }

        public B HorizontalMirrored() => new B(HorizontalMirror(bitB), HorizontalMirror(bitW), n_stone);

        public static ulong HorizontalMirror(ulong x)
        {
            return BinaryPrimitives.ReverseEndianness(x);
        }

        public B VerticalMirrored() => new B(VerticalMirror(bitB), VerticalMirror(bitW), n_stone);

        public static ulong VerticalMirror(ulong b)
        {
            b = ((b >> 1) & 0x5555555555555555UL) | ((b << 1) & 0xAAAAAAAAAAAAAAAAUL);
            b = ((b >> 2) & 0x3333333333333333UL) | ((b << 2) & 0xCCCCCCCCCCCCCCCCUL);
            b = ((b >> 4) & 0x0F0F0F0F0F0F0F0FUL) | ((b << 4) & 0xF0F0F0F0F0F0F0F0UL);

            return b;
        }

        public B Transposed() => new B(Transpose(bitB), Transpose(bitW), n_stone);

        public static ulong Transpose(ulong x)
        {
            ulong t;
            ulong k1 = (0xaa00aa00aa00aa00);
            ulong k2 = (0xcccc0000cccc0000);
            ulong k4 = (0xf0f0f0f00f0f0f0f);
            t = x ^ (x << 36);
            x ^= k4 & (t ^ (x >> 36));
            t = k2 & (x ^ (x << 18));
            x ^= t ^ (t >> 18);
            t = k1 & (x ^ (x << 9));
            x ^= t ^ (t >> 9);
            return x;
        }

        public static ulong Rotate90(ulong x) => Transpose(HorizontalMirror(x));

        public B Rotated90() => new B(Rotate90(bitB), Rotate90(bitW), n_stone);

        public static int BitCount(ulong v)
        {
            return BitOperations.PopCount(v);
        }

        public static ulong LowestOneBit(ulong i)
        {
            return i & (~i + 1);
        }

        public static int To1dimPos(int x, int y)
        {
            return x * 8 + y;
        }

        public int GetId(int x, int y)
        {
            return GetId(To1dimPos(x, y));
        }

        public int GetId(int i)
        {
            int result = (int)(bitB >> i) & 1;
            result += (int)((bitW >> i) & 1) * 2;
            return result;
        }

        public static (int, int) ToPos(ulong move)
        {
            int x = BitOperations.TrailingZeroCount(move);
            return (x / 8, x & 7);
        }

        public override int GetHashCode()
        {
            int result = 0;
            result = result * 31 + (int)(bitB ^ (bitB >> 32));
            result = result * 31 + (int)(bitW ^ (bitW >> 32));
            return result;
        }

        public override bool Equals(object obj)
        {
            return (obj is B b) && (b.bitB == bitB) && (b.bitW == bitW);
        }

        public ulong GetMoves() => GetMovesAvx2(bitB, bitW);

        public ulong GetMoves(int stone) => stone switch
        {
            1 => GetMovesAvx2(bitB, bitW),
            -1 => GetMovesAvx2(bitW, bitB),
            _ => 0,
        };

        public ulong GetOpponentMoves() => GetMovesAvx2(bitW, bitB);

        public static ulong GetMovesAvx2(ulong P, ulong O)
        {
            Vector256<ulong> PP, mask, moves, offset;
            Vector128<ulong> moves128;

            offset = Vector256.Create(7UL, 9UL, 8UL, 1UL);
            PP = Vector256.Create(P, P, P, P);
            mask = Avx2.And(Vector256.Create(O, O, O, O), Vector256.Create(0x7e7e7e7e7e7e7e7eUL, 0x7e7e7e7e7e7e7e7eUL, 0xffffffffffffffffUL, 0x7e7e7e7e7e7e7e7eUL));

            moves = Avx2.And(mask, Avx2.Or(Avx2.ShiftLeftLogicalVariable(PP, offset), Avx2.ShiftRightLogicalVariable(PP, offset)));
            moves = Avx2.Or(moves, Avx2.And(mask, Avx2.Or(Avx2.ShiftLeftLogicalVariable(moves, offset), Avx2.ShiftRightLogicalVariable(moves, offset))));
            moves = Avx2.Or(moves, Avx2.And(mask, Avx2.Or(Avx2.ShiftLeftLogicalVariable(moves, offset), Avx2.ShiftRightLogicalVariable(moves, offset))));
            moves = Avx2.Or(moves, Avx2.And(mask, Avx2.Or(Avx2.ShiftLeftLogicalVariable(moves, offset), Avx2.ShiftRightLogicalVariable(moves, offset))));
            moves = Avx2.Or(moves, Avx2.And(mask, Avx2.Or(Avx2.ShiftLeftLogicalVariable(moves, offset), Avx2.ShiftRightLogicalVariable(moves, offset))));
            moves = Avx2.Or(moves, Avx2.And(mask, Avx2.Or(Avx2.ShiftLeftLogicalVariable(moves, offset), Avx2.ShiftRightLogicalVariable(moves, offset))));

            moves = Avx2.Or(Avx2.ShiftLeftLogicalVariable(moves, offset), Avx2.ShiftRightLogicalVariable(moves, offset));

            moves128 = Sse2.Or(Avx2.ExtractVector128(moves, 0), Avx2.ExtractVector128(moves, 1));
            return (Sse2.UnpackHigh(moves128, moves128).ToScalar() | moves128.ToScalar()) & ~(P | O);
        }

        public B ColorFliped()
        {
            return new B(bitW, bitB, n_stone);
        }

        public B Reversed(ulong move)
        {
            ulong reversed = ReverseAvx(move, bitB, bitW);
            return new B(bitW ^ reversed, bitB ^ (move | reversed), n_stone + 1);
        }

        public B Reversed(ulong move, int stone)
        {
            ulong reversed;

            switch (stone)
            {
                case 1:
                    reversed = ReverseAvx(move, bitB, bitW);
                    return new B(bitB ^ (move | reversed), bitW ^ reversed, n_stone + 1);

                case -1:
                    reversed = ReverseAvx(move, bitW, bitB);
                    return new B(bitB ^ reversed, bitW ^ (move | reversed), n_stone + 1);
            }
            return this;
        }

        public static ulong ReverseAvx(ulong move, ulong p, ulong o)
        {
            Vector256<ulong> PP, mask, reversed, flip_l, flip_r, flags;
            Vector128<ulong> reversed128;
            Vector256<ulong> offset = Vector256.Create(7UL, 9UL, 8UL, 1UL);
            Vector256<ulong> move_v = Vector256.Create(move);

            PP = Vector256.Create(p);
            mask = Avx2.And(Vector256.Create(o), Vector256.Create(0x7e7e7e7e7e7e7e7eUL, 0x7e7e7e7e7e7e7e7eUL, 0xffffffffffffffffUL, 0x7e7e7e7e7e7e7e7eUL));

            flip_l = Avx2.And(mask, Avx2.ShiftLeftLogicalVariable(move_v, offset));
            flip_l = Avx2.Or(flip_l, Avx2.And(mask, Avx2.ShiftLeftLogicalVariable(flip_l, offset)));
            flip_l = Avx2.Or(flip_l, Avx2.And(mask, Avx2.ShiftLeftLogicalVariable(flip_l, offset)));
            flip_l = Avx2.Or(flip_l, Avx2.And(mask, Avx2.ShiftLeftLogicalVariable(flip_l, offset)));
            flip_l = Avx2.Or(flip_l, Avx2.And(mask, Avx2.ShiftLeftLogicalVariable(flip_l, offset)));
            flip_l = Avx2.Or(flip_l, Avx2.And(mask, Avx2.ShiftLeftLogicalVariable(flip_l, offset)));

            flags = Avx2.And(PP, Avx2.ShiftLeftLogicalVariable(flip_l, offset));
            flip_l = Avx2.And(flip_l, Avx2.Xor(Vector256.Create(0xffffffffffffffffUL), Avx2.CompareEqual(flags, Vector256.Create(0UL))));

            flip_r = Avx2.And(mask, Avx2.ShiftRightLogicalVariable(move_v, offset));
            flip_r = Avx2.Or(flip_r, Avx2.And(mask, Avx2.ShiftRightLogicalVariable(flip_r, offset)));
            flip_r = Avx2.Or(flip_r, Avx2.And(mask, Avx2.ShiftRightLogicalVariable(flip_r, offset)));
            flip_r = Avx2.Or(flip_r, Avx2.And(mask, Avx2.ShiftRightLogicalVariable(flip_r, offset)));
            flip_r = Avx2.Or(flip_r, Avx2.And(mask, Avx2.ShiftRightLogicalVariable(flip_r, offset)));
            flip_r = Avx2.Or(flip_r, Avx2.And(mask, Avx2.ShiftRightLogicalVariable(flip_r, offset)));

            flags = Avx2.And(PP, Avx2.ShiftRightLogicalVariable(flip_r, offset));
            flip_r = Avx2.And(flip_r, Avx2.Xor(Vector256.Create(0xffffffffffffffffUL), Avx2.CompareEqual(flags, Vector256.Create(0UL))));

            reversed = Avx2.Or(flip_l, flip_r);

            reversed128 = Sse2.Or(Avx2.ExtractVector128(reversed, 0), Avx2.ExtractVector128(reversed, 1));
            reversed128 = Sse2.Or(reversed128, Sse2.UnpackHigh(reversed128, reversed128));
            return reversed128.ToScalar();
        }

        public int GetStoneCountGap()
        {
            return (2 * BitCount(bitB) - n_stone);
        }

        public int GetStoneCountGap(int s)
        {
            return s * GetStoneCountGap();
        }

        public static ulong NextMove(ulong moves)
        {
            return LowestOneBit(moves);
        }

        public static ulong RemoveMove(ulong moves, ulong move)
        {
            return moves ^ move;
        }

        public static bool operator ==(B b1, B b2) => (b1.bitB == b2.bitB) && (b1.bitW == b2.bitW);

        public static bool operator !=(B b1, B b2) => (b1.bitB != b2.bitB) || (b1.bitW != b2.bitW);

        public override string ToString()
        {
            B b = this;
            string Disc(int x, int y) => b.GetId(x, y) switch
            {
                0 => " ",
                1 => "X",
                2 => "O",
                _ => "?"
            };

            string Line(int y)
            {
                return $"{y} | {Disc(0, y)} | {Disc(1, y)} | {Disc(2, y)} | {Disc(3, y)} | {Disc(4, y)} | {Disc(5, y)} | {Disc(6, y)} | {Disc(7, y)} |";
            }

            return string.Join(Environment.NewLine,
                $"    0   1   2   3   4   5   6   7",
                $"  +---+---+---+---+---+---+---+---+", Line(0),
                $"  +---+---+---+---+---+---+---+---+", Line(1),
                $"  +---+---+---+---+---+---+---+---+", Line(2),
                $"  +---+---+---+---+---+---+---+---+", Line(3),
                $"  +---+---+---+---+---+---+---+---+", Line(4),
                $"  +---+---+---+---+---+---+---+---+", Line(5),
                $"  +---+---+---+---+---+---+---+---+", Line(6),
                $"  +---+---+---+---+---+---+---+---+", Line(7),
                $"  +---+---+---+---+---+---+---+---+");
        }
    }
}
